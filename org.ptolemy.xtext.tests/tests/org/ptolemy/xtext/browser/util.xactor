namespace org.ptolemy.xtext.util :

actor Variable<T>(T initialValue=null, boolean allowNull=true, (T) => boolean validator)
T* setValue ==> T value :
	var T current = initialValue;
	function isValid(T value) --> boolean :
		(allowNull || value != null) && (validator == null || validator.apply(value))
	end
	action [newValue] any ==> [current] when isValid(value)
	do
		val T value = newValue.values.head
		if (isValid(value)) {
			current = value
		}
	end
end

actor Converter<T,S>((T) => S fun)
T input ==> S output, Exception exception :
	action input: [input] ==> [value] when exception == null, [exception] when exception != null
	do
		var Exception exception = null
		var S value = null
		try {
			value = fun.apply(input)
		} catch (Exception e) {
			exception = e
		}
	end
end

actor ConverterValve<T,S>((T) => S fun)
T input, Object trigger ==> S output, Exception exception :
	var T current = null;
	action input: [input] ==>
	do current = input
	end
	action trigger: [trigger] when trigger != null && trigger != Boolean::FALSE && ! (trigger instanceof Throwable) ==> [value] when exception == null, [exception] when exception != null
	do
		var Exception exception = null
		var S value = null
		try {
			value = fun.apply(current)
		} catch (Exception e) {
			exception = e
		}
	end
end

actor Valve<T>
T input, Object trigger ==> T output :
	var T current = null;
	action [input] ==>
	do current = input
	end
	action trigger: [trigger] when triggers(trigger) ==> [current]
	end
	action [input],[trigger] when triggers(trigger) ==> [current]
	do current = input
	end
	function triggers(Object trigger) --> boolean :
		trigger != null && trigger != Boolean::FALSE && ! (trigger instanceof Throwable)
	end
end

actor InstanceOf(String className = "java.lang.Object")
Object input ==> boolean output :
	action [input] ==> [input != null && (input.getClass().name.equals(className) || input.getClass().simpleName == className)]
	end
end

actor Object2String<T>(String def="")
T input ==> String output :
	action [input] ==> [if (input != null) input.toString() else def]
	end
end

actor FirstChannel<T>
T* input ==> T output :
	action [input] any ==> [value]
	do
		val T value = input.values.head
	end
end

end
