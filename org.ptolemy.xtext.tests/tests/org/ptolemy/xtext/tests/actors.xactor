namespace org.ptolemy.xtext.tests.actors :

import java.util.Iterator
import java.util.Collection
import java.util.List
import java.util.LinkedList

namespace sources :

	namespace generic :
		actor StringConst(String value="value", int fireLimit=-1)
		==> String output :
			function hasMore() --> boolean :
				fireLimit < 0 || step < fireLimit
			end
			action ==> [value] guard hasMore
			update
				hasMore
			end
		end
	end

	namespace timed :
	
		actor CurrentTime(boolean useLocalTime=false)
		==> double output :
			action ==> [time]
			do
				val double time = if (useLocalTime)
	                director.modelTime.doubleValue
	            else
	                director.globalTime.doubleValue
	        end
		end

		actor CurrentMicrostep
		==> int output :
			action ==> [(director as ptolemy.^actor.SuperdenseTimeDirector).index]
			end
		end
	end

	namespace sequence :
	
		actor Ramp (int start=0, int step=1, int stop=10)
		==> int output :
			var int state = start;
			function hasMore() --> boolean :
				state < stop
			end
			action ==> [old_state] guard hasMore
			do
				state = state + step
			update
				hasMore
			end
		end
		
		actor Values<T>(Iterable<T> values, boolean rep=false)
		==> T output :
			val Iterator<T> iter = values.iterator;
			val T next = null;
			function updateNext() --> boolean :
				next = null
				if (rep && (! iter.hasNext)) {
					iter = values.iterator
				}
				if (iter.hasNext) {
					next = iter.next
				}
				next != null
			end
			initialize ==> do updateNext end
			action ==> [next] guard next != null
			update updateNext
			end
		end
	end
end

namespace sinks :

	namespace generic :

		actor Discard
		Object input ==> :
			action [ignore] ==>
			end
		end
		
		actor Recorder(int capacity=-1)
		Object* input ==> :
			val Collection<Object> values = new LinkedList<Object>();
			val Collection<Double> times  = new LinkedList<Double>();
			action [input] any ==>
			do 
				while (capacity >= 0 && (values.size() >= capacity )) {
					values.remove(0)
					times.remove(0)
				}
				values += input.values().toIterable()
				times += director.modelTime.doubleValue
			end
		end
	end
end

namespace logic :

	actor LogicFunction(String fun="and")
	boolean* input  ==> boolean output :
		// index of fun represents the truth table, as shown below
		// see http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node131.html#SECTION001670000000000000000
		val List<String> optable = #[
			"clr", "nor", "andc2", "c2", "andc1", "c1", "xor", "nand",
			"and", "eqv", "1", "orc2", "2", "orc1", "ior", "set"
		];
		action [input] any ==> [integer1 == 1] guard optable.indexOf(fun) >= 0
		do 
			val int op = optable.indexOf(fun)
			var int integer1 = (if (input # input.head) 1 else 0)
			for (channel : input) {
				val int integer2 = (if (input # channel) 2 else 0)
				integer1 = (op >> (integer1 + integer2)) % 2
			}
		end
		//	----------------------------------------------------------------
		//	integer1  0       1       0       1 
		//	integer2  0       0       1       1       Operation Performed 
		//	----------------------------------------------------------------
		//	clr       0       0       0       0       always 0 
		//	nor       1       0       0       0       not-or 
		//	andc2     0       1       0       0       and integer1 with complement of integer2 
		//	c2        1       1       0       0       complement of integer2 
		//	andc1     0       0       1       0       and complement of integer1 with integer2 
		//	c1        1       0       1       0       complement of integer1 
		//	xor       0       1       1       0       exclusive or 
		//	nand      1       1       1       0       not-and 
		//	and       0       0       0       1       and 
		//	eqv       1       0       0       1       equivalence (exclusive nor) 
		//	1         0       1       0       1       integer1 
		//	orc2      1       1       0       1       or integer1 with complement of integer2 
		//	2         0       0       1       1       integer2 
		//	orc1      1       0       1       1       or complement of integer1 with integer2 
		//	ior       0       1       1       1       inclusive or 
		//	set       1       1       1       1       always 1 
	end
end

namespace misc :
	
	actor ReduceChannels<T>((T, T) => T fun)
	T* input ==> T output :
		action [input] any ==> [output]
		do 
			var T output = input # input.head
			for (channel : input.tail) {
				output = fun.apply(output, input # channel)
			}
		end
	end
	
	actor FoldChannels<S,T>((S, T) => S fun, S init)
	T* input ==> S output :
		action [input] any ==> [output]
		do 
			var S output = init
			for (channel : input) { 
				val T channelValue = input # channel
				output = fun.apply(output, channelValue)
			}
		end
	end
	
	actor ApplyInput1<T,R>((T) => R fun)
	T input ==> R output :
		action [input] ==> [fun.apply(input)]
		end
	end
	
	actor ApplyInput2<T,R>((T, T) => R fun)
	T[2] input ==> R output :
		action [input1, input2] ==> [fun.apply(input1, input2)]
		end
	end
	
	actor SelectChannel1<T>
	int channel, T* input ==> T output :
		var int currentChannel = 0;
		action [channel],[input] at {channel} ==> [input # currentChannel]
		do 
			currentChannel = channel
		end
		action [channel] ==>
		do 
			currentChannel = channel
		end
		action input:[input] at {currentChannel} ==> [input # currentChannel]
		end
	end

	actor SelectChannelN<T>
	int channel, T* input ==> T output :
		var int currentChannel = 0;
		action [channel],[input] at all ==> [input # currentChannel]
		do 
			currentChannel = channel
		end
		action [channel] ==>
		do 
			currentChannel = channel
		end
		action input:[input] at all ==> [input # currentChannel]
		end
	end

	actor copier<T>
	T input ==> T output :
		action [input] ==> [input]
		end
	end
end

end
