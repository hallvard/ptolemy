/*
* generated by Xtext
*/

package org.ptolemy.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class XActorGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ActorModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActorModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDisplayNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cDisplayNameAssignment_3.eContents().get(0);
		private final Assignment cImportsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cImportsImportDirectiveParserRuleCall_4_0 = (RuleCall)cImportsAssignment_4.eContents().get(0);
		private final Assignment cAttributesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAttributesAttributeParserRuleCall_5_0 = (RuleCall)cAttributesAssignment_5.eContents().get(0);
		private final Assignment cEntityContainersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEntityContainersEntityFolderParserRuleCall_6_0 = (RuleCall)cEntityContainersAssignment_6.eContents().get(0);
		private final Assignment cEntitiesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEntitiesEntityParserRuleCall_7_0 = (RuleCall)cEntitiesAssignment_7.eContents().get(0);
		private final Assignment cRelationsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cRelationsRelationParserRuleCall_8_0 = (RuleCall)cRelationsAssignment_8.eContents().get(0);
		
		//ActorModel:
		//	{ActorModel} "model" name=QualifiedName displayName=STRING? imports+=ImportDirective* attributes+=Attribute*
		//	entityContainers+=EntityFolder* entities+=Entity* relations+=Relation*;
		public ParserRule getRule() { return rule; }

		//{ActorModel} "model" name=QualifiedName displayName=STRING? imports+=ImportDirective* attributes+=Attribute*
		//entityContainers+=EntityFolder* entities+=Entity* relations+=Relation*
		public Group getGroup() { return cGroup; }

		//{ActorModel}
		public Action getActorModelAction_0() { return cActorModelAction_0; }

		//"model"
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_3() { return cDisplayNameAssignment_3; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_3_0() { return cDisplayNameSTRINGTerminalRuleCall_3_0; }

		//imports+=ImportDirective*
		public Assignment getImportsAssignment_4() { return cImportsAssignment_4; }

		//ImportDirective
		public RuleCall getImportsImportDirectiveParserRuleCall_4_0() { return cImportsImportDirectiveParserRuleCall_4_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_5() { return cAttributesAssignment_5; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_5_0() { return cAttributesAttributeParserRuleCall_5_0; }

		//entityContainers+=EntityFolder*
		public Assignment getEntityContainersAssignment_6() { return cEntityContainersAssignment_6; }

		//EntityFolder
		public RuleCall getEntityContainersEntityFolderParserRuleCall_6_0() { return cEntityContainersEntityFolderParserRuleCall_6_0; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_7() { return cEntitiesAssignment_7; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_7_0() { return cEntitiesEntityParserRuleCall_7_0; }

		//relations+=Relation*
		public Assignment getRelationsAssignment_8() { return cRelationsAssignment_8; }

		//Relation
		public RuleCall getRelationsRelationParserRuleCall_8_0() { return cRelationsRelationParserRuleCall_8_0; }
	}

	public class EntityFolderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityFolder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityFolderAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDisplayNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cDisplayNameAssignment_3.eContents().get(0);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cEntitiesAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_6_0_0 = (RuleCall)cEntitiesAssignment_6_0.eContents().get(0);
		private final Assignment cEntityContainersAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cEntityContainersEntityFolderParserRuleCall_6_1_0 = (RuleCall)cEntityContainersAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EntityFolder:
		//	{EntityFolder} "container" name=ValidID displayName=STRING? attributes+=Attribute* "{" (entities+=Entity |
		//	entityContainers+=EntityFolder)* "}";
		public ParserRule getRule() { return rule; }

		//{EntityFolder} "container" name=ValidID displayName=STRING? attributes+=Attribute* "{" (entities+=Entity |
		//entityContainers+=EntityFolder)* "}"
		public Group getGroup() { return cGroup; }

		//{EntityFolder}
		public Action getEntityFolderAction_0() { return cEntityFolderAction_0; }

		//"container"
		public Keyword getContainerKeyword_1() { return cContainerKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_3() { return cDisplayNameAssignment_3; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_3_0() { return cDisplayNameSTRINGTerminalRuleCall_3_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_0() { return cAttributesAttributeParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//(entities+=Entity | entityContainers+=EntityFolder)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//entities+=Entity
		public Assignment getEntitiesAssignment_6_0() { return cEntitiesAssignment_6_0; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_6_0_0() { return cEntitiesEntityParserRuleCall_6_0_0; }

		//entityContainers+=EntityFolder
		public Assignment getEntityContainersAssignment_6_1() { return cEntityContainersAssignment_6_1; }

		//EntityFolder
		public RuleCall getEntityContainersEntityFolderParserRuleCall_6_1_0() { return cEntityContainersEntityFolderParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ImportDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportDirective");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//ImportDirective:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*"?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ".*"?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypedAtomicActorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypedAtomicActorInstanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCompositeEntityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Entity:
		//	TypedAtomicActor | TypedAtomicActorInstance | CompositeEntity;
		public ParserRule getRule() { return rule; }

		//TypedAtomicActor | TypedAtomicActorInstance | CompositeEntity
		public Alternatives getAlternatives() { return cAlternatives; }

		//TypedAtomicActor
		public RuleCall getTypedAtomicActorParserRuleCall_0() { return cTypedAtomicActorParserRuleCall_0; }

		//TypedAtomicActorInstance
		public RuleCall getTypedAtomicActorInstanceParserRuleCall_1() { return cTypedAtomicActorInstanceParserRuleCall_1; }

		//CompositeEntity
		public RuleCall getCompositeEntityParserRuleCall_2() { return cCompositeEntityParserRuleCall_2; }
	}

	public class ActorRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefEntityCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefEntityQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cRefEntityCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsJvmTypeReferenceParserRuleCall_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterBindingsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterBindingsParameterBindingParserRuleCall_2_1_0 = (RuleCall)cParameterBindingsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParameterBindingsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParameterBindingsParameterBindingParserRuleCall_2_2_1_0 = (RuleCall)cParameterBindingsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ActorRef:
		//	ref=[Entity|QualifiedName] ("<" typeArguments+=JvmTypeReference ("," typeArguments+=JvmTypeReference)* ">")? ("("
		//	parameterBindings+=ParameterBinding ("," parameterBindings+=ParameterBinding)* ")")?;
		public ParserRule getRule() { return rule; }

		//ref=[Entity|QualifiedName] ("<" typeArguments+=JvmTypeReference ("," typeArguments+=JvmTypeReference)* ">")? ("("
		//parameterBindings+=ParameterBinding ("," parameterBindings+=ParameterBinding)* ")")?
		public Group getGroup() { return cGroup; }

		//ref=[Entity|QualifiedName]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[Entity|QualifiedName]
		public CrossReference getRefEntityCrossReference_0_0() { return cRefEntityCrossReference_0_0; }

		//QualifiedName
		public RuleCall getRefEntityQualifiedNameParserRuleCall_0_0_1() { return cRefEntityQualifiedNameParserRuleCall_0_0_1; }

		//("<" typeArguments+=JvmTypeReference ("," typeArguments+=JvmTypeReference)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeArguments+=JvmTypeReference
		public Assignment getTypeArgumentsAssignment_1_1() { return cTypeArgumentsAssignment_1_1; }

		//JvmTypeReference
		public RuleCall getTypeArgumentsJvmTypeReferenceParserRuleCall_1_1_0() { return cTypeArgumentsJvmTypeReferenceParserRuleCall_1_1_0; }

		//("," typeArguments+=JvmTypeReference)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeArguments+=JvmTypeReference
		public Assignment getTypeArgumentsAssignment_1_2_1() { return cTypeArgumentsAssignment_1_2_1; }

		//JvmTypeReference
		public RuleCall getTypeArgumentsJvmTypeReferenceParserRuleCall_1_2_1_0() { return cTypeArgumentsJvmTypeReferenceParserRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//("(" parameterBindings+=ParameterBinding ("," parameterBindings+=ParameterBinding)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameterBindings+=ParameterBinding
		public Assignment getParameterBindingsAssignment_2_1() { return cParameterBindingsAssignment_2_1; }

		//ParameterBinding
		public RuleCall getParameterBindingsParameterBindingParserRuleCall_2_1_0() { return cParameterBindingsParameterBindingParserRuleCall_2_1_0; }

		//("," parameterBindings+=ParameterBinding)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameterBindings+=ParameterBinding
		public Assignment getParameterBindingsAssignment_2_2_1() { return cParameterBindingsAssignment_2_2_1; }

		//ParameterBinding
		public RuleCall getParameterBindingsParameterBindingParserRuleCall_2_2_1_0() { return cParameterBindingsParameterBindingParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class XInitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XInitExpression");
		private final RuleCall cXOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//XInitExpression returns xbase::XExpression:
		//	XOrExpression;
		public ParserRule getRule() { return rule; }

		//XOrExpression
		public RuleCall getXOrExpressionParserRuleCall() { return cXOrExpressionParserRuleCall; }
	}

	public class ParameterBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cParameterRefAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cParameterRefParameterCrossReference_0_0_0 = (CrossReference)cParameterRefAssignment_0_0.eContents().get(0);
		private final RuleCall cParameterRefParameterValidIDParserRuleCall_0_0_0_1 = (RuleCall)cParameterRefParameterCrossReference_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionXInitExpressionParserRuleCall_1_0 = (RuleCall)cValueExpressionAssignment_1.eContents().get(0);
		
		//ParameterBinding:
		//	(parameterRef=[Parameter|ValidID] "=")? valueExpression=XInitExpression;
		public ParserRule getRule() { return rule; }

		//(parameterRef=[Parameter|ValidID] "=")? valueExpression=XInitExpression
		public Group getGroup() { return cGroup; }

		//(parameterRef=[Parameter|ValidID] "=")?
		public Group getGroup_0() { return cGroup_0; }

		//parameterRef=[Parameter|ValidID]
		public Assignment getParameterRefAssignment_0_0() { return cParameterRefAssignment_0_0; }

		//[Parameter|ValidID]
		public CrossReference getParameterRefParameterCrossReference_0_0_0() { return cParameterRefParameterCrossReference_0_0_0; }

		//ValidID
		public RuleCall getParameterRefParameterValidIDParserRuleCall_0_0_0_1() { return cParameterRefParameterValidIDParserRuleCall_0_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//valueExpression=XInitExpression
		public Assignment getValueExpressionAssignment_1() { return cValueExpressionAssignment_1; }

		//XInitExpression
		public RuleCall getValueExpressionXInitExpressionParserRuleCall_1_0() { return cValueExpressionXInitExpressionParserRuleCall_1_0; }
	}

	public class IS_AElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IS_A");
		private final Keyword cIsKeyword = (Keyword)rule.eContents().get(1);
		
		//IS_A:
		//	"is";
		public ParserRule getRule() { return rule; }

		//"is"
		public Keyword getIsKeyword() { return cIsKeyword; }
	}

	public class MAPS_TOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAPS_TO");
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//MAPS_TO:
		//	"==>";
		public ParserRule getRule() { return rule; }

		//"==>"
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword() { return cEqualsSignEqualsSignGreaterThanSignKeyword; }
	}

	public class TypedAtomicActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedAtomicActor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedAtomicActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDisplayNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cDisplayNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeParametersTypeParameterParserRuleCall_4_1_0 = (RuleCall)cTypeParametersAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cTypeParametersTypeParameterParserRuleCall_4_2_1_0 = (RuleCall)cTypeParametersAssignment_4_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributesActorParameterParserRuleCall_5_1_0 = (RuleCall)cAttributesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cAttributesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cAttributesActorParameterParserRuleCall_5_2_1_0 = (RuleCall)cAttributesAssignment_5_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cGroup_6.eContents().get(0);
		private final Assignment cPortsAssignment_6_0_0 = (Assignment)cGroup_6_0.eContents().get(0);
		private final RuleCall cPortsTypedInputPortParserRuleCall_6_0_0_0 = (RuleCall)cPortsAssignment_6_0_0.eContents().get(0);
		private final Group cGroup_6_0_1 = (Group)cGroup_6_0.eContents().get(1);
		private final Keyword cCommaKeyword_6_0_1_0 = (Keyword)cGroup_6_0_1.eContents().get(0);
		private final Assignment cPortsAssignment_6_0_1_1 = (Assignment)cGroup_6_0_1.eContents().get(1);
		private final RuleCall cPortsTypedInputPortParserRuleCall_6_0_1_1_0 = (RuleCall)cPortsAssignment_6_0_1_1.eContents().get(0);
		private final RuleCall cMAPS_TOParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Assignment cPortsAssignment_6_2_0 = (Assignment)cGroup_6_2.eContents().get(0);
		private final RuleCall cPortsTypedOutputPortParserRuleCall_6_2_0_0 = (RuleCall)cPortsAssignment_6_2_0.eContents().get(0);
		private final Group cGroup_6_2_1 = (Group)cGroup_6_2.eContents().get(1);
		private final Keyword cCommaKeyword_6_2_1_0 = (Keyword)cGroup_6_2_1.eContents().get(0);
		private final Assignment cPortsAssignment_6_2_1_1 = (Assignment)cGroup_6_2_1.eContents().get(1);
		private final RuleCall cPortsTypedOutputPortParserRuleCall_6_2_1_1_0 = (RuleCall)cPortsAssignment_6_2_1_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final RuleCall cIS_AParserRuleCall_7_0 = (RuleCall)cGroup_7.eContents().get(0);
		private final Assignment cSuperEntityAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSuperEntityActorRefParserRuleCall_7_1_0 = (RuleCall)cSuperEntityAssignment_7_1.eContents().get(0);
		private final Assignment cPortsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPortsPortParserRuleCall_8_0 = (RuleCall)cPortsAssignment_8.eContents().get(0);
		private final Assignment cAttributesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAttributesAttributeParserRuleCall_9_0 = (RuleCall)cAttributesAssignment_9.eContents().get(0);
		private final Assignment cImplAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cImplAtomicActorImplParserRuleCall_10_0 = (RuleCall)cImplAssignment_10.eContents().get(0);
		
		//TypedAtomicActor:
		//	{TypedAtomicActor} "actor" name=ValidID displayName=STRING? ("<" typeParameters+=TypeParameter (","
		//	typeParameters+=TypeParameter)* ">")? ("(" attributes+=ActorParameter ("," attributes+=ActorParameter)* ")")?
		//	((ports+=TypedInputPort ("," ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort (","
		//	ports+=TypedOutputPort)*)?)? (IS_A superEntity=ActorRef)? ports+=Port* attributes+=Attribute* impl=AtomicActorImpl?;
		public ParserRule getRule() { return rule; }

		//{TypedAtomicActor} "actor" name=ValidID displayName=STRING? ("<" typeParameters+=TypeParameter (","
		//typeParameters+=TypeParameter)* ">")? ("(" attributes+=ActorParameter ("," attributes+=ActorParameter)* ")")?
		//((ports+=TypedInputPort ("," ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort (","
		//ports+=TypedOutputPort)*)?)? (IS_A superEntity=ActorRef)? ports+=Port* attributes+=Attribute* impl=AtomicActorImpl?
		public Group getGroup() { return cGroup; }

		//{TypedAtomicActor}
		public Action getTypedAtomicActorAction_0() { return cTypedAtomicActorAction_0; }

		//"actor"
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_3() { return cDisplayNameAssignment_3; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_3_0() { return cDisplayNameSTRINGTerminalRuleCall_3_0; }

		//("<" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)* ">")?
		public Group getGroup_4() { return cGroup_4; }

		//"<"
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }

		//typeParameters+=TypeParameter
		public Assignment getTypeParametersAssignment_4_1() { return cTypeParametersAssignment_4_1; }

		//TypeParameter
		public RuleCall getTypeParametersTypeParameterParserRuleCall_4_1_0() { return cTypeParametersTypeParameterParserRuleCall_4_1_0; }

		//("," typeParameters+=TypeParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//typeParameters+=TypeParameter
		public Assignment getTypeParametersAssignment_4_2_1() { return cTypeParametersAssignment_4_2_1; }

		//TypeParameter
		public RuleCall getTypeParametersTypeParameterParserRuleCall_4_2_1_0() { return cTypeParametersTypeParameterParserRuleCall_4_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4_3() { return cGreaterThanSignKeyword_4_3; }

		//("(" attributes+=ActorParameter ("," attributes+=ActorParameter)* ")")?
		public Group getGroup_5() { return cGroup_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }

		//attributes+=ActorParameter
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }

		//ActorParameter
		public RuleCall getAttributesActorParameterParserRuleCall_5_1_0() { return cAttributesActorParameterParserRuleCall_5_1_0; }

		//("," attributes+=ActorParameter)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//","
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//attributes+=ActorParameter
		public Assignment getAttributesAssignment_5_2_1() { return cAttributesAssignment_5_2_1; }

		//ActorParameter
		public RuleCall getAttributesActorParameterParserRuleCall_5_2_1_0() { return cAttributesActorParameterParserRuleCall_5_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }

		//((ports+=TypedInputPort ("," ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort ("," ports+=TypedOutputPort)*)?)?
		public Group getGroup_6() { return cGroup_6; }

		//(ports+=TypedInputPort ("," ports+=TypedInputPort)*)?
		public Group getGroup_6_0() { return cGroup_6_0; }

		//ports+=TypedInputPort
		public Assignment getPortsAssignment_6_0_0() { return cPortsAssignment_6_0_0; }

		//TypedInputPort
		public RuleCall getPortsTypedInputPortParserRuleCall_6_0_0_0() { return cPortsTypedInputPortParserRuleCall_6_0_0_0; }

		//("," ports+=TypedInputPort)*
		public Group getGroup_6_0_1() { return cGroup_6_0_1; }

		//","
		public Keyword getCommaKeyword_6_0_1_0() { return cCommaKeyword_6_0_1_0; }

		//ports+=TypedInputPort
		public Assignment getPortsAssignment_6_0_1_1() { return cPortsAssignment_6_0_1_1; }

		//TypedInputPort
		public RuleCall getPortsTypedInputPortParserRuleCall_6_0_1_1_0() { return cPortsTypedInputPortParserRuleCall_6_0_1_1_0; }

		//MAPS_TO
		public RuleCall getMAPS_TOParserRuleCall_6_1() { return cMAPS_TOParserRuleCall_6_1; }

		//(ports+=TypedOutputPort ("," ports+=TypedOutputPort)*)?
		public Group getGroup_6_2() { return cGroup_6_2; }

		//ports+=TypedOutputPort
		public Assignment getPortsAssignment_6_2_0() { return cPortsAssignment_6_2_0; }

		//TypedOutputPort
		public RuleCall getPortsTypedOutputPortParserRuleCall_6_2_0_0() { return cPortsTypedOutputPortParserRuleCall_6_2_0_0; }

		//("," ports+=TypedOutputPort)*
		public Group getGroup_6_2_1() { return cGroup_6_2_1; }

		//","
		public Keyword getCommaKeyword_6_2_1_0() { return cCommaKeyword_6_2_1_0; }

		//ports+=TypedOutputPort
		public Assignment getPortsAssignment_6_2_1_1() { return cPortsAssignment_6_2_1_1; }

		//TypedOutputPort
		public RuleCall getPortsTypedOutputPortParserRuleCall_6_2_1_1_0() { return cPortsTypedOutputPortParserRuleCall_6_2_1_1_0; }

		//(IS_A superEntity=ActorRef)?
		public Group getGroup_7() { return cGroup_7; }

		//IS_A
		public RuleCall getIS_AParserRuleCall_7_0() { return cIS_AParserRuleCall_7_0; }

		//superEntity=ActorRef
		public Assignment getSuperEntityAssignment_7_1() { return cSuperEntityAssignment_7_1; }

		//ActorRef
		public RuleCall getSuperEntityActorRefParserRuleCall_7_1_0() { return cSuperEntityActorRefParserRuleCall_7_1_0; }

		//ports+=Port*
		public Assignment getPortsAssignment_8() { return cPortsAssignment_8; }

		//Port
		public RuleCall getPortsPortParserRuleCall_8_0() { return cPortsPortParserRuleCall_8_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_9() { return cAttributesAssignment_9; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_9_0() { return cAttributesAttributeParserRuleCall_9_0; }

		//impl=AtomicActorImpl?
		public Assignment getImplAssignment_10() { return cImplAssignment_10; }

		//AtomicActorImpl
		public RuleCall getImplAtomicActorImplParserRuleCall_10_0() { return cImplAtomicActorImplParserRuleCall_10_0; }
	}

	public class TypeParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExtendsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//TypeParameter:
		//	name=ID ("extends" type=JvmTypeReference)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("extends" type=JvmTypeReference)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("extends" type=JvmTypeReference)?
		public Group getGroup_1() { return cGroup_1; }

		//"extends"
		public Keyword getExtendsKeyword_1_0() { return cExtendsKeyword_1_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_1_0; }
	}

	public class InstanceParameterBindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceParameterBinding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cParameterRefAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cParameterRefParameterCrossReference_0_0_0 = (CrossReference)cParameterRefAssignment_0_0.eContents().get(0);
		private final RuleCall cParameterRefParameterValidIDParserRuleCall_0_0_0_1 = (RuleCall)cParameterRefParameterCrossReference_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueExpressionAlternatives_1_0 = (Alternatives)cValueExpressionAssignment_1.eContents().get(0);
		private final RuleCall cValueExpressionXBooleanLiteralParserRuleCall_1_0_0 = (RuleCall)cValueExpressionAlternatives_1_0.eContents().get(0);
		private final RuleCall cValueExpressionXNumberLiteralParserRuleCall_1_0_1 = (RuleCall)cValueExpressionAlternatives_1_0.eContents().get(1);
		private final RuleCall cValueExpressionXStringLiteralParserRuleCall_1_0_2 = (RuleCall)cValueExpressionAlternatives_1_0.eContents().get(2);
		
		//InstanceParameterBinding returns ParameterBinding:
		//	(parameterRef=[Parameter|ValidID] "=")? valueExpression=(XBooleanLiteral | XNumberLiteral | XStringLiteral);
		public ParserRule getRule() { return rule; }

		//(parameterRef=[Parameter|ValidID] "=")? valueExpression=(XBooleanLiteral | XNumberLiteral | XStringLiteral)
		public Group getGroup() { return cGroup; }

		//(parameterRef=[Parameter|ValidID] "=")?
		public Group getGroup_0() { return cGroup_0; }

		//parameterRef=[Parameter|ValidID]
		public Assignment getParameterRefAssignment_0_0() { return cParameterRefAssignment_0_0; }

		//[Parameter|ValidID]
		public CrossReference getParameterRefParameterCrossReference_0_0_0() { return cParameterRefParameterCrossReference_0_0_0; }

		//ValidID
		public RuleCall getParameterRefParameterValidIDParserRuleCall_0_0_0_1() { return cParameterRefParameterValidIDParserRuleCall_0_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//valueExpression=(XBooleanLiteral | XNumberLiteral | XStringLiteral)
		public Assignment getValueExpressionAssignment_1() { return cValueExpressionAssignment_1; }

		//XBooleanLiteral | XNumberLiteral | XStringLiteral
		public Alternatives getValueExpressionAlternatives_1_0() { return cValueExpressionAlternatives_1_0; }

		//XBooleanLiteral
		public RuleCall getValueExpressionXBooleanLiteralParserRuleCall_1_0_0() { return cValueExpressionXBooleanLiteralParserRuleCall_1_0_0; }

		//XNumberLiteral
		public RuleCall getValueExpressionXNumberLiteralParserRuleCall_1_0_1() { return cValueExpressionXNumberLiteralParserRuleCall_1_0_1; }

		//XStringLiteral
		public RuleCall getValueExpressionXStringLiteralParserRuleCall_1_0_2() { return cValueExpressionXStringLiteralParserRuleCall_1_0_2; }
	}

	public class InstanceActorRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstanceActorRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefEntityCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefEntityQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cRefEntityCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParameterBindingsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParameterBindingsInstanceParameterBindingParserRuleCall_1_1_0 = (RuleCall)cParameterBindingsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParameterBindingsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParameterBindingsInstanceParameterBindingParserRuleCall_1_2_1_0 = (RuleCall)cParameterBindingsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//InstanceActorRef returns ActorRef:
		//	ref=[Entity|QualifiedName] ("(" parameterBindings+=InstanceParameterBinding (","
		//	parameterBindings+=InstanceParameterBinding)* ")")?;
		public ParserRule getRule() { return rule; }

		//ref=[Entity|QualifiedName] ("(" parameterBindings+=InstanceParameterBinding (","
		//parameterBindings+=InstanceParameterBinding)* ")")?
		public Group getGroup() { return cGroup; }

		//ref=[Entity|QualifiedName]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//[Entity|QualifiedName]
		public CrossReference getRefEntityCrossReference_0_0() { return cRefEntityCrossReference_0_0; }

		//QualifiedName
		public RuleCall getRefEntityQualifiedNameParserRuleCall_0_0_1() { return cRefEntityQualifiedNameParserRuleCall_0_0_1; }

		//("(" parameterBindings+=InstanceParameterBinding ("," parameterBindings+=InstanceParameterBinding)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//parameterBindings+=InstanceParameterBinding
		public Assignment getParameterBindingsAssignment_1_1() { return cParameterBindingsAssignment_1_1; }

		//InstanceParameterBinding
		public RuleCall getParameterBindingsInstanceParameterBindingParserRuleCall_1_1_0() { return cParameterBindingsInstanceParameterBindingParserRuleCall_1_1_0; }

		//("," parameterBindings+=InstanceParameterBinding)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//parameterBindings+=InstanceParameterBinding
		public Assignment getParameterBindingsAssignment_1_2_1() { return cParameterBindingsAssignment_1_2_1; }

		//InstanceParameterBinding
		public RuleCall getParameterBindingsInstanceParameterBindingParserRuleCall_1_2_1_0() { return cParameterBindingsInstanceParameterBindingParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class TypedAtomicActorInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedAtomicActorInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypedAtomicActorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInstanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDisplayNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cDisplayNameAssignment_3.eContents().get(0);
		private final RuleCall cIS_AParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cSuperEntityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSuperEntityInstanceActorRefParserRuleCall_5_0 = (RuleCall)cSuperEntityAssignment_5.eContents().get(0);
		
		//TypedAtomicActorInstance returns TypedAtomicActor:
		//	{TypedAtomicActor} "instance" name=ValidID displayName=STRING? IS_A superEntity=InstanceActorRef;
		public ParserRule getRule() { return rule; }

		//{TypedAtomicActor} "instance" name=ValidID displayName=STRING? IS_A superEntity=InstanceActorRef
		public Group getGroup() { return cGroup; }

		//{TypedAtomicActor}
		public Action getTypedAtomicActorAction_0() { return cTypedAtomicActorAction_0; }

		//"instance"
		public Keyword getInstanceKeyword_1() { return cInstanceKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_3() { return cDisplayNameAssignment_3; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_3_0() { return cDisplayNameSTRINGTerminalRuleCall_3_0; }

		//IS_A
		public RuleCall getIS_AParserRuleCall_4() { return cIS_AParserRuleCall_4; }

		//superEntity=InstanceActorRef
		public Assignment getSuperEntityAssignment_5() { return cSuperEntityAssignment_5; }

		//InstanceActorRef
		public RuleCall getSuperEntityInstanceActorRefParserRuleCall_5_0() { return cSuperEntityInstanceActorRefParserRuleCall_5_0; }
	}

	public class CompositeEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cEntityKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_0_0_1_0 = (RuleCall)cNameAssignment_0_0_1.eContents().get(0);
		private final Assignment cDisplayNameAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_0_0_2_0 = (RuleCall)cDisplayNameAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_0_0_3 = (Group)cGroup_0_0.eContents().get(3);
		private final RuleCall cIS_AParserRuleCall_0_0_3_0 = (RuleCall)cGroup_0_0_3.eContents().get(0);
		private final Assignment cSuperEntityAssignment_0_0_3_1 = (Assignment)cGroup_0_0_3.eContents().get(1);
		private final RuleCall cSuperEntityActorRefParserRuleCall_0_0_3_1_0 = (RuleCall)cSuperEntityAssignment_0_0_3_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Action cTypedCompositeActorAction_0_1_0_0 = (Action)cGroup_0_1_0.eContents().get(0);
		private final Keyword cCompositeKeyword_0_1_0_1 = (Keyword)cGroup_0_1_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1_0_2 = (Assignment)cGroup_0_1_0.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_0_1_0_2_0 = (RuleCall)cNameAssignment_0_1_0_2.eContents().get(0);
		private final Assignment cDisplayNameAssignment_0_1_0_3 = (Assignment)cGroup_0_1_0.eContents().get(3);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_0_1_0_3_0 = (RuleCall)cDisplayNameAssignment_0_1_0_3.eContents().get(0);
		private final Group cGroup_0_1_0_4 = (Group)cGroup_0_1_0.eContents().get(4);
		private final Keyword cLessThanSignKeyword_0_1_0_4_0 = (Keyword)cGroup_0_1_0_4.eContents().get(0);
		private final Assignment cTypeParametersAssignment_0_1_0_4_1 = (Assignment)cGroup_0_1_0_4.eContents().get(1);
		private final RuleCall cTypeParametersTypeParameterParserRuleCall_0_1_0_4_1_0 = (RuleCall)cTypeParametersAssignment_0_1_0_4_1.eContents().get(0);
		private final Group cGroup_0_1_0_4_2 = (Group)cGroup_0_1_0_4.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_0_4_2_0 = (Keyword)cGroup_0_1_0_4_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_0_1_0_4_2_1 = (Assignment)cGroup_0_1_0_4_2.eContents().get(1);
		private final RuleCall cTypeParametersTypeParameterParserRuleCall_0_1_0_4_2_1_0 = (RuleCall)cTypeParametersAssignment_0_1_0_4_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1_0_4_3 = (Keyword)cGroup_0_1_0_4.eContents().get(3);
		private final Group cGroup_0_1_0_5 = (Group)cGroup_0_1_0.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_0_1_0_5_0 = (Keyword)cGroup_0_1_0_5.eContents().get(0);
		private final Assignment cAttributesAssignment_0_1_0_5_1 = (Assignment)cGroup_0_1_0_5.eContents().get(1);
		private final RuleCall cAttributesActorParameterParserRuleCall_0_1_0_5_1_0 = (RuleCall)cAttributesAssignment_0_1_0_5_1.eContents().get(0);
		private final Group cGroup_0_1_0_5_2 = (Group)cGroup_0_1_0_5.eContents().get(2);
		private final Keyword cCommaKeyword_0_1_0_5_2_0 = (Keyword)cGroup_0_1_0_5_2.eContents().get(0);
		private final Assignment cAttributesAssignment_0_1_0_5_2_1 = (Assignment)cGroup_0_1_0_5_2.eContents().get(1);
		private final RuleCall cAttributesActorParameterParserRuleCall_0_1_0_5_2_1_0 = (RuleCall)cAttributesAssignment_0_1_0_5_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_0_5_3 = (Keyword)cGroup_0_1_0_5.eContents().get(3);
		private final Group cGroup_0_1_0_6 = (Group)cGroup_0_1_0.eContents().get(6);
		private final Group cGroup_0_1_0_6_0 = (Group)cGroup_0_1_0_6.eContents().get(0);
		private final Assignment cPortsAssignment_0_1_0_6_0_0 = (Assignment)cGroup_0_1_0_6_0.eContents().get(0);
		private final RuleCall cPortsTypedInputPortParserRuleCall_0_1_0_6_0_0_0 = (RuleCall)cPortsAssignment_0_1_0_6_0_0.eContents().get(0);
		private final Group cGroup_0_1_0_6_0_1 = (Group)cGroup_0_1_0_6_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0_6_0_1_0 = (Keyword)cGroup_0_1_0_6_0_1.eContents().get(0);
		private final Assignment cPortsAssignment_0_1_0_6_0_1_1 = (Assignment)cGroup_0_1_0_6_0_1.eContents().get(1);
		private final RuleCall cPortsTypedInputPortParserRuleCall_0_1_0_6_0_1_1_0 = (RuleCall)cPortsAssignment_0_1_0_6_0_1_1.eContents().get(0);
		private final RuleCall cMAPS_TOParserRuleCall_0_1_0_6_1 = (RuleCall)cGroup_0_1_0_6.eContents().get(1);
		private final Group cGroup_0_1_0_6_2 = (Group)cGroup_0_1_0_6.eContents().get(2);
		private final Assignment cPortsAssignment_0_1_0_6_2_0 = (Assignment)cGroup_0_1_0_6_2.eContents().get(0);
		private final RuleCall cPortsTypedOutputPortParserRuleCall_0_1_0_6_2_0_0 = (RuleCall)cPortsAssignment_0_1_0_6_2_0.eContents().get(0);
		private final Group cGroup_0_1_0_6_2_1 = (Group)cGroup_0_1_0_6_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0_6_2_1_0 = (Keyword)cGroup_0_1_0_6_2_1.eContents().get(0);
		private final Assignment cPortsAssignment_0_1_0_6_2_1_1 = (Assignment)cGroup_0_1_0_6_2_1.eContents().get(1);
		private final RuleCall cPortsTypedOutputPortParserRuleCall_0_1_0_6_2_1_1_0 = (RuleCall)cPortsAssignment_0_1_0_6_2_1_1.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final RuleCall cIS_AParserRuleCall_0_1_1_0 = (RuleCall)cGroup_0_1_1.eContents().get(0);
		private final Assignment cSuperEntityAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cSuperEntityActorRefParserRuleCall_0_1_1_1_0 = (RuleCall)cSuperEntityAssignment_0_1_1_1.eContents().get(0);
		private final Assignment cPortsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPortsPortParserRuleCall_1_0 = (RuleCall)cPortsAssignment_1.eContents().get(0);
		private final Assignment cAttributesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributesAttributeParserRuleCall_2_0 = (RuleCall)cAttributesAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntitiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntitiesEntityParserRuleCall_4_0 = (RuleCall)cEntitiesAssignment_4.eContents().get(0);
		private final Assignment cRelationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRelationsRelationParserRuleCall_5_0 = (RuleCall)cRelationsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CompositeEntity:
		//	("entity" name=ValidID displayName=STRING? (IS_A superEntity=ActorRef)? | ({TypedCompositeActor} "composite"
		//	name=ValidID displayName=STRING? ("<" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)* ">")? ("("
		//	attributes+=ActorParameter ("," attributes+=ActorParameter)* ")")? ((ports+=TypedInputPort (","
		//	ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort ("," ports+=TypedOutputPort)*)?)?) (IS_A
		//	superEntity=ActorRef)?) ports+=Port* attributes+=Attribute* "{" entities+=Entity* relations+=Relation* "}";
		public ParserRule getRule() { return rule; }

		//("entity" name=ValidID displayName=STRING? (IS_A superEntity=ActorRef)? | ({TypedCompositeActor} "composite"
		//name=ValidID displayName=STRING? ("<" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)* ">")? ("("
		//attributes+=ActorParameter ("," attributes+=ActorParameter)* ")")? ((ports+=TypedInputPort (","
		//ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort ("," ports+=TypedOutputPort)*)?)?) (IS_A
		//superEntity=ActorRef)?) ports+=Port* attributes+=Attribute* "{" entities+=Entity* relations+=Relation* "}"
		public Group getGroup() { return cGroup; }

		//"entity" name=ValidID displayName=STRING? (IS_A superEntity=ActorRef)? | ({TypedCompositeActor} "composite" name=ValidID
		//displayName=STRING? ("<" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)* ">")? ("("
		//attributes+=ActorParameter ("," attributes+=ActorParameter)* ")")? ((ports+=TypedInputPort (","
		//ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort ("," ports+=TypedOutputPort)*)?)?) (IS_A
		//superEntity=ActorRef)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"entity" name=ValidID displayName=STRING? (IS_A superEntity=ActorRef)?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"entity"
		public Keyword getEntityKeyword_0_0_0() { return cEntityKeyword_0_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_0_0_1() { return cNameAssignment_0_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0_1_0() { return cNameValidIDParserRuleCall_0_0_1_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_0_0_2() { return cDisplayNameAssignment_0_0_2; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_0_0_2_0() { return cDisplayNameSTRINGTerminalRuleCall_0_0_2_0; }

		//(IS_A superEntity=ActorRef)?
		public Group getGroup_0_0_3() { return cGroup_0_0_3; }

		//IS_A
		public RuleCall getIS_AParserRuleCall_0_0_3_0() { return cIS_AParserRuleCall_0_0_3_0; }

		//superEntity=ActorRef
		public Assignment getSuperEntityAssignment_0_0_3_1() { return cSuperEntityAssignment_0_0_3_1; }

		//ActorRef
		public RuleCall getSuperEntityActorRefParserRuleCall_0_0_3_1_0() { return cSuperEntityActorRefParserRuleCall_0_0_3_1_0; }

		//({TypedCompositeActor} "composite" name=ValidID displayName=STRING? ("<" typeParameters+=TypeParameter (","
		//typeParameters+=TypeParameter)* ">")? ("(" attributes+=ActorParameter ("," attributes+=ActorParameter)* ")")?
		//((ports+=TypedInputPort ("," ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort (","
		//ports+=TypedOutputPort)*)?)?) (IS_A superEntity=ActorRef)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{TypedCompositeActor} "composite" name=ValidID displayName=STRING? ("<" typeParameters+=TypeParameter (","
		//typeParameters+=TypeParameter)* ">")? ("(" attributes+=ActorParameter ("," attributes+=ActorParameter)* ")")?
		//((ports+=TypedInputPort ("," ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort (","
		//ports+=TypedOutputPort)*)?)?
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//{TypedCompositeActor}
		public Action getTypedCompositeActorAction_0_1_0_0() { return cTypedCompositeActorAction_0_1_0_0; }

		//"composite"
		public Keyword getCompositeKeyword_0_1_0_1() { return cCompositeKeyword_0_1_0_1; }

		//name=ValidID
		public Assignment getNameAssignment_0_1_0_2() { return cNameAssignment_0_1_0_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_1_0_2_0() { return cNameValidIDParserRuleCall_0_1_0_2_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_0_1_0_3() { return cDisplayNameAssignment_0_1_0_3; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_0_1_0_3_0() { return cDisplayNameSTRINGTerminalRuleCall_0_1_0_3_0; }

		//("<" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)* ">")?
		public Group getGroup_0_1_0_4() { return cGroup_0_1_0_4; }

		//"<"
		public Keyword getLessThanSignKeyword_0_1_0_4_0() { return cLessThanSignKeyword_0_1_0_4_0; }

		//typeParameters+=TypeParameter
		public Assignment getTypeParametersAssignment_0_1_0_4_1() { return cTypeParametersAssignment_0_1_0_4_1; }

		//TypeParameter
		public RuleCall getTypeParametersTypeParameterParserRuleCall_0_1_0_4_1_0() { return cTypeParametersTypeParameterParserRuleCall_0_1_0_4_1_0; }

		//("," typeParameters+=TypeParameter)*
		public Group getGroup_0_1_0_4_2() { return cGroup_0_1_0_4_2; }

		//","
		public Keyword getCommaKeyword_0_1_0_4_2_0() { return cCommaKeyword_0_1_0_4_2_0; }

		//typeParameters+=TypeParameter
		public Assignment getTypeParametersAssignment_0_1_0_4_2_1() { return cTypeParametersAssignment_0_1_0_4_2_1; }

		//TypeParameter
		public RuleCall getTypeParametersTypeParameterParserRuleCall_0_1_0_4_2_1_0() { return cTypeParametersTypeParameterParserRuleCall_0_1_0_4_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_1_0_4_3() { return cGreaterThanSignKeyword_0_1_0_4_3; }

		//("(" attributes+=ActorParameter ("," attributes+=ActorParameter)* ")")?
		public Group getGroup_0_1_0_5() { return cGroup_0_1_0_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1_0_5_0() { return cLeftParenthesisKeyword_0_1_0_5_0; }

		//attributes+=ActorParameter
		public Assignment getAttributesAssignment_0_1_0_5_1() { return cAttributesAssignment_0_1_0_5_1; }

		//ActorParameter
		public RuleCall getAttributesActorParameterParserRuleCall_0_1_0_5_1_0() { return cAttributesActorParameterParserRuleCall_0_1_0_5_1_0; }

		//("," attributes+=ActorParameter)*
		public Group getGroup_0_1_0_5_2() { return cGroup_0_1_0_5_2; }

		//","
		public Keyword getCommaKeyword_0_1_0_5_2_0() { return cCommaKeyword_0_1_0_5_2_0; }

		//attributes+=ActorParameter
		public Assignment getAttributesAssignment_0_1_0_5_2_1() { return cAttributesAssignment_0_1_0_5_2_1; }

		//ActorParameter
		public RuleCall getAttributesActorParameterParserRuleCall_0_1_0_5_2_1_0() { return cAttributesActorParameterParserRuleCall_0_1_0_5_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1_0_5_3() { return cRightParenthesisKeyword_0_1_0_5_3; }

		//((ports+=TypedInputPort ("," ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort ("," ports+=TypedOutputPort)*)?)?
		public Group getGroup_0_1_0_6() { return cGroup_0_1_0_6; }

		//(ports+=TypedInputPort ("," ports+=TypedInputPort)*)?
		public Group getGroup_0_1_0_6_0() { return cGroup_0_1_0_6_0; }

		//ports+=TypedInputPort
		public Assignment getPortsAssignment_0_1_0_6_0_0() { return cPortsAssignment_0_1_0_6_0_0; }

		//TypedInputPort
		public RuleCall getPortsTypedInputPortParserRuleCall_0_1_0_6_0_0_0() { return cPortsTypedInputPortParserRuleCall_0_1_0_6_0_0_0; }

		//("," ports+=TypedInputPort)*
		public Group getGroup_0_1_0_6_0_1() { return cGroup_0_1_0_6_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0_6_0_1_0() { return cCommaKeyword_0_1_0_6_0_1_0; }

		//ports+=TypedInputPort
		public Assignment getPortsAssignment_0_1_0_6_0_1_1() { return cPortsAssignment_0_1_0_6_0_1_1; }

		//TypedInputPort
		public RuleCall getPortsTypedInputPortParserRuleCall_0_1_0_6_0_1_1_0() { return cPortsTypedInputPortParserRuleCall_0_1_0_6_0_1_1_0; }

		//MAPS_TO
		public RuleCall getMAPS_TOParserRuleCall_0_1_0_6_1() { return cMAPS_TOParserRuleCall_0_1_0_6_1; }

		//(ports+=TypedOutputPort ("," ports+=TypedOutputPort)*)?
		public Group getGroup_0_1_0_6_2() { return cGroup_0_1_0_6_2; }

		//ports+=TypedOutputPort
		public Assignment getPortsAssignment_0_1_0_6_2_0() { return cPortsAssignment_0_1_0_6_2_0; }

		//TypedOutputPort
		public RuleCall getPortsTypedOutputPortParserRuleCall_0_1_0_6_2_0_0() { return cPortsTypedOutputPortParserRuleCall_0_1_0_6_2_0_0; }

		//("," ports+=TypedOutputPort)*
		public Group getGroup_0_1_0_6_2_1() { return cGroup_0_1_0_6_2_1; }

		//","
		public Keyword getCommaKeyword_0_1_0_6_2_1_0() { return cCommaKeyword_0_1_0_6_2_1_0; }

		//ports+=TypedOutputPort
		public Assignment getPortsAssignment_0_1_0_6_2_1_1() { return cPortsAssignment_0_1_0_6_2_1_1; }

		//TypedOutputPort
		public RuleCall getPortsTypedOutputPortParserRuleCall_0_1_0_6_2_1_1_0() { return cPortsTypedOutputPortParserRuleCall_0_1_0_6_2_1_1_0; }

		//(IS_A superEntity=ActorRef)?
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }

		//IS_A
		public RuleCall getIS_AParserRuleCall_0_1_1_0() { return cIS_AParserRuleCall_0_1_1_0; }

		//superEntity=ActorRef
		public Assignment getSuperEntityAssignment_0_1_1_1() { return cSuperEntityAssignment_0_1_1_1; }

		//ActorRef
		public RuleCall getSuperEntityActorRefParserRuleCall_0_1_1_1_0() { return cSuperEntityActorRefParserRuleCall_0_1_1_1_0; }

		//ports+=Port*
		public Assignment getPortsAssignment_1() { return cPortsAssignment_1; }

		//Port
		public RuleCall getPortsPortParserRuleCall_1_0() { return cPortsPortParserRuleCall_1_0; }

		//attributes+=Attribute*
		public Assignment getAttributesAssignment_2() { return cAttributesAssignment_2; }

		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_2_0() { return cAttributesAttributeParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_4() { return cEntitiesAssignment_4; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_4_0() { return cEntitiesEntityParserRuleCall_4_0; }

		//relations+=Relation*
		public Assignment getRelationsAssignment_5() { return cRelationsAssignment_5; }

		//Relation
		public RuleCall getRelationsRelationParserRuleCall_5_0() { return cRelationsRelationParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInjectableAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Attribute:
		//	InjectableAttribute | Variable;
		public ParserRule getRule() { return rule; }

		//InjectableAttribute | Variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//InjectableAttribute
		public RuleCall getInjectableAttributeParserRuleCall_0() { return cInjectableAttributeParserRuleCall_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
	}

	public class InjectableAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InjectableAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDisplayNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cDisplayNameAssignment_3.eContents().get(0);
		
		//InjectableAttribute:
		//	"-" type=JvmTypeReference name=ValidID displayName=STRING?;
		public ParserRule getRule() { return rule; }

		//"-" type=JvmTypeReference name=ValidID displayName=STRING?
		public Group getGroup() { return cGroup; }

		//"-"
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_3() { return cDisplayNameAssignment_3; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_3_0() { return cDisplayNameSTRINGTerminalRuleCall_3_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cParameterAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDisplayNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cDisplayNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueExpressionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueExpressionXInitExpressionParserRuleCall_4_1_0 = (RuleCall)cValueExpressionAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//Variable:
		//	("+" | {Parameter} "*") type=JvmTypeReference name=ValidID displayName=STRING? ("=" valueExpression=XInitExpression
		//	";")?;
		public ParserRule getRule() { return rule; }

		//("+" | {Parameter} "*") type=JvmTypeReference name=ValidID displayName=STRING? ("=" valueExpression=XInitExpression
		//";")?
		public Group getGroup() { return cGroup; }

		//"+" | {Parameter} "*"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//{Parameter} "*"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{Parameter}
		public Action getParameterAction_0_1_0() { return cParameterAction_0_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_1_1() { return cAsteriskKeyword_0_1_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_3() { return cDisplayNameAssignment_3; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_3_0() { return cDisplayNameSTRINGTerminalRuleCall_3_0; }

		//("=" valueExpression=XInitExpression ";")?
		public Group getGroup_4() { return cGroup_4; }

		//"="
		public Keyword getEqualsSignKeyword_4_0() { return cEqualsSignKeyword_4_0; }

		//valueExpression=XInitExpression
		public Assignment getValueExpressionAssignment_4_1() { return cValueExpressionAssignment_4_1; }

		//XInitExpression
		public RuleCall getValueExpressionXInitExpressionParserRuleCall_4_1_0() { return cValueExpressionXInitExpressionParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4_2() { return cSemicolonKeyword_4_2; }
	}

	public class ActorParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDisplayNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cDisplayNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueExpressionXInitExpressionParserRuleCall_3_1_0 = (RuleCall)cValueExpressionAssignment_3_1.eContents().get(0);
		
		//ActorParameter:
		//	type=JvmTypeReference name=ValidID displayName=STRING? ("=" valueExpression=XInitExpression)?;
		public ParserRule getRule() { return rule; }

		//type=JvmTypeReference name=ValidID displayName=STRING? ("=" valueExpression=XInitExpression)?
		public Group getGroup() { return cGroup; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_2() { return cDisplayNameAssignment_2; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_2_0() { return cDisplayNameSTRINGTerminalRuleCall_2_0; }

		//("=" valueExpression=XInitExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//valueExpression=XInitExpression
		public Assignment getValueExpressionAssignment_3_1() { return cValueExpressionAssignment_3_1; }

		//XInitExpression
		public RuleCall getValueExpressionXInitExpressionParserRuleCall_3_1_0() { return cValueExpressionXInitExpressionParserRuleCall_3_1_0; }
	}

	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPlainPortParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cTypedIOPortParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommercialAtKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesAnnotationAttributeParserRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		
		//Port:
		//	(PlainPort | TypedIOPort) ("@" attributes+=AnnotationAttribute)*;
		public ParserRule getRule() { return rule; }

		//(PlainPort | TypedIOPort) ("@" attributes+=AnnotationAttribute)*
		public Group getGroup() { return cGroup; }

		//PlainPort | TypedIOPort
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//PlainPort
		public RuleCall getPlainPortParserRuleCall_0_0() { return cPlainPortParserRuleCall_0_0; }

		//TypedIOPort
		public RuleCall getTypedIOPortParserRuleCall_0_1() { return cTypedIOPortParserRuleCall_0_1; }

		//("@" attributes+=AnnotationAttribute)*
		public Group getGroup_1() { return cGroup_1; }

		//"@"
		public Keyword getCommercialAtKeyword_1_0() { return cCommercialAtKeyword_1_0; }

		//attributes+=AnnotationAttribute
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }

		//AnnotationAttribute
		public RuleCall getAttributesAnnotationAttributeParserRuleCall_1_1_0() { return cAttributesAnnotationAttributeParserRuleCall_1_1_0; }
	}

	public class AnnotationAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypePortTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionXInitExpressionParserRuleCall_4_0 = (RuleCall)cValueExpressionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AnnotationAttribute returns Attribute:
		//	{Parameter} type=PortTypeReference? name=ValidID "=" valueExpression=XInitExpression ";";
		public ParserRule getRule() { return rule; }

		//{Parameter} type=PortTypeReference? name=ValidID "=" valueExpression=XInitExpression ";"
		public Group getGroup() { return cGroup; }

		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//type=PortTypeReference?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//PortTypeReference
		public RuleCall getTypePortTypeReferenceParserRuleCall_1_0() { return cTypePortTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//valueExpression=XInitExpression
		public Assignment getValueExpressionAssignment_4() { return cValueExpressionAssignment_4; }

		//XInitExpression
		public RuleCall getValueExpressionXInitExpressionParserRuleCall_4_0() { return cValueExpressionXInitExpressionParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class PlainPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlainPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPortAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDisplayNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cDisplayNameAssignment_3.eContents().get(0);
		
		//PlainPort returns Port:
		//	{Port} "->" name=ValidID displayName=STRING?;
		public ParserRule getRule() { return rule; }

		//{Port} "->" name=ValidID displayName=STRING?
		public Group getGroup() { return cGroup; }

		//{Port}
		public Action getPortAction_0() { return cPortAction_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_3() { return cDisplayNameAssignment_3; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_3_0() { return cDisplayNameSTRINGTerminalRuleCall_3_0; }
	}

	public class PortTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortTypeReference");
		private final RuleCall cJvmParameterizedTypeReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PortTypeReference returns types::JvmTypeReference:
		//	JvmParameterizedTypeReference;
		public ParserRule getRule() { return rule; }

		//JvmParameterizedTypeReference
		public RuleCall getJvmParameterizedTypeReferenceParserRuleCall() { return cJvmParameterizedTypeReferenceParserRuleCall; }
	}

	public class TypedIOPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedIOPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIoKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIoKindIOPortKindEnumRuleCall_0_0 = (RuleCall)cIoKindAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypePortTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRateAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRateINTTerminalRuleCall_2_1_0 = (RuleCall)cRateAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cMultiportAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMultiportAsteriskKeyword_3_0 = (Keyword)cMultiportAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cDisplayNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_5_0 = (RuleCall)cDisplayNameAssignment_5.eContents().get(0);
		
		//TypedIOPort:
		//	ioKind=IOPortKind type=PortTypeReference ("[" rate=INT "]")? multiport?="*"? name=ValidID displayName=STRING?;
		public ParserRule getRule() { return rule; }

		//ioKind=IOPortKind type=PortTypeReference ("[" rate=INT "]")? multiport?="*"? name=ValidID displayName=STRING?
		public Group getGroup() { return cGroup; }

		//ioKind=IOPortKind
		public Assignment getIoKindAssignment_0() { return cIoKindAssignment_0; }

		//IOPortKind
		public RuleCall getIoKindIOPortKindEnumRuleCall_0_0() { return cIoKindIOPortKindEnumRuleCall_0_0; }

		//type=PortTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//PortTypeReference
		public RuleCall getTypePortTypeReferenceParserRuleCall_1_0() { return cTypePortTypeReferenceParserRuleCall_1_0; }

		//("[" rate=INT "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//rate=INT
		public Assignment getRateAssignment_2_1() { return cRateAssignment_2_1; }

		//INT
		public RuleCall getRateINTTerminalRuleCall_2_1_0() { return cRateINTTerminalRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }

		//multiport?="*"?
		public Assignment getMultiportAssignment_3() { return cMultiportAssignment_3; }

		//"*"
		public Keyword getMultiportAsteriskKeyword_3_0() { return cMultiportAsteriskKeyword_3_0; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_5() { return cDisplayNameAssignment_5; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_5_0() { return cDisplayNameSTRINGTerminalRuleCall_5_0; }
	}

	public class TypedInputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedInputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePortTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRateAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRateINTTerminalRuleCall_1_1_0 = (RuleCall)cRateAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMultiportAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMultiportAsteriskKeyword_2_0 = (Keyword)cMultiportAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDisplayNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cDisplayNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommercialAtKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributesAnnotationAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributesAssignment_5_1.eContents().get(0);
		
		//TypedInputPort:
		//	type=PortTypeReference ("[" rate=INT "]")? multiport?="*"? name=ValidID displayName=STRING? ("@"
		//	attributes+=AnnotationAttribute)*;
		public ParserRule getRule() { return rule; }

		//type=PortTypeReference ("[" rate=INT "]")? multiport?="*"? name=ValidID displayName=STRING? ("@"
		//attributes+=AnnotationAttribute)*
		public Group getGroup() { return cGroup; }

		//type=PortTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//PortTypeReference
		public RuleCall getTypePortTypeReferenceParserRuleCall_0_0() { return cTypePortTypeReferenceParserRuleCall_0_0; }

		//("[" rate=INT "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//rate=INT
		public Assignment getRateAssignment_1_1() { return cRateAssignment_1_1; }

		//INT
		public RuleCall getRateINTTerminalRuleCall_1_1_0() { return cRateINTTerminalRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//multiport?="*"?
		public Assignment getMultiportAssignment_2() { return cMultiportAssignment_2; }

		//"*"
		public Keyword getMultiportAsteriskKeyword_2_0() { return cMultiportAsteriskKeyword_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_4() { return cDisplayNameAssignment_4; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_4_0() { return cDisplayNameSTRINGTerminalRuleCall_4_0; }

		//("@" attributes+=AnnotationAttribute)*
		public Group getGroup_5() { return cGroup_5; }

		//"@"
		public Keyword getCommercialAtKeyword_5_0() { return cCommercialAtKeyword_5_0; }

		//attributes+=AnnotationAttribute
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }

		//AnnotationAttribute
		public RuleCall getAttributesAnnotationAttributeParserRuleCall_5_1_0() { return cAttributesAnnotationAttributeParserRuleCall_5_1_0; }
	}

	public class TypedOutputPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypedOutputPort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypePortTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRateAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRateINTTerminalRuleCall_1_1_0 = (RuleCall)cRateAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMultiportAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMultiportAsteriskKeyword_2_0 = (Keyword)cMultiportAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDisplayNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_4_0 = (RuleCall)cDisplayNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommercialAtKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAttributesAnnotationAttributeParserRuleCall_5_1_0 = (RuleCall)cAttributesAssignment_5_1.eContents().get(0);
		
		//TypedOutputPort:
		//	type=PortTypeReference ("[" rate=INT "]")? multiport?="*"? name=ValidID displayName=STRING? ("@"
		//	attributes+=AnnotationAttribute)*;
		public ParserRule getRule() { return rule; }

		//type=PortTypeReference ("[" rate=INT "]")? multiport?="*"? name=ValidID displayName=STRING? ("@"
		//attributes+=AnnotationAttribute)*
		public Group getGroup() { return cGroup; }

		//type=PortTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//PortTypeReference
		public RuleCall getTypePortTypeReferenceParserRuleCall_0_0() { return cTypePortTypeReferenceParserRuleCall_0_0; }

		//("[" rate=INT "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//rate=INT
		public Assignment getRateAssignment_1_1() { return cRateAssignment_1_1; }

		//INT
		public RuleCall getRateINTTerminalRuleCall_1_1_0() { return cRateINTTerminalRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//multiport?="*"?
		public Assignment getMultiportAssignment_2() { return cMultiportAssignment_2; }

		//"*"
		public Keyword getMultiportAsteriskKeyword_2_0() { return cMultiportAsteriskKeyword_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_4() { return cDisplayNameAssignment_4; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_4_0() { return cDisplayNameSTRINGTerminalRuleCall_4_0; }

		//("@" attributes+=AnnotationAttribute)*
		public Group getGroup_5() { return cGroup_5; }

		//"@"
		public Keyword getCommercialAtKeyword_5_0() { return cCommercialAtKeyword_5_0; }

		//attributes+=AnnotationAttribute
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }

		//AnnotationAttribute
		public RuleCall getAttributesAnnotationAttributeParserRuleCall_5_1_0() { return cAttributesAnnotationAttributeParserRuleCall_5_1_0; }
	}

	public class RPIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RPID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//RPID:
		//	ID? ("." ID);
		public ParserRule getRule() { return rule; }

		//ID? ("." ID)
		public Group getGroup() { return cGroup; }

		//ID?
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"." ID
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourcePortAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourcePortPortCrossReference_1_0 = (CrossReference)cSourcePortAssignment_1.eContents().get(0);
		private final RuleCall cSourcePortPortRPIDParserRuleCall_1_0_1 = (RuleCall)cSourcePortPortCrossReference_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetPortsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetPortsPortCrossReference_3_0 = (CrossReference)cTargetPortsAssignment_3.eContents().get(0);
		private final RuleCall cTargetPortsPortRPIDParserRuleCall_3_0_1 = (RuleCall)cTargetPortsPortCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTargetPortsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cTargetPortsPortCrossReference_4_1_0 = (CrossReference)cTargetPortsAssignment_4_1.eContents().get(0);
		private final RuleCall cTargetPortsPortRPIDParserRuleCall_4_1_0_1 = (RuleCall)cTargetPortsPortCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_5_1_0 = (RuleCall)cNameAssignment_5_1.eContents().get(0);
		private final Assignment cDisplayNameAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDisplayNameSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cDisplayNameAssignment_5_2.eContents().get(0);
		
		//Relation:
		//	"relation" sourcePort=[Port|RPID] "->" targetPorts+=[Port|RPID] ("," targetPorts+=[Port|RPID])* ("as" name=ValidID
		//	displayName=STRING?)?;
		public ParserRule getRule() { return rule; }

		//"relation" sourcePort=[Port|RPID] "->" targetPorts+=[Port|RPID] ("," targetPorts+=[Port|RPID])* ("as" name=ValidID
		//displayName=STRING?)?
		public Group getGroup() { return cGroup; }

		//"relation"
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }

		//sourcePort=[Port|RPID]
		public Assignment getSourcePortAssignment_1() { return cSourcePortAssignment_1; }

		//[Port|RPID]
		public CrossReference getSourcePortPortCrossReference_1_0() { return cSourcePortPortCrossReference_1_0; }

		//RPID
		public RuleCall getSourcePortPortRPIDParserRuleCall_1_0_1() { return cSourcePortPortRPIDParserRuleCall_1_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//targetPorts+=[Port|RPID]
		public Assignment getTargetPortsAssignment_3() { return cTargetPortsAssignment_3; }

		//[Port|RPID]
		public CrossReference getTargetPortsPortCrossReference_3_0() { return cTargetPortsPortCrossReference_3_0; }

		//RPID
		public RuleCall getTargetPortsPortRPIDParserRuleCall_3_0_1() { return cTargetPortsPortRPIDParserRuleCall_3_0_1; }

		//("," targetPorts+=[Port|RPID])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//targetPorts+=[Port|RPID]
		public Assignment getTargetPortsAssignment_4_1() { return cTargetPortsAssignment_4_1; }

		//[Port|RPID]
		public CrossReference getTargetPortsPortCrossReference_4_1_0() { return cTargetPortsPortCrossReference_4_1_0; }

		//RPID
		public RuleCall getTargetPortsPortRPIDParserRuleCall_4_1_0_1() { return cTargetPortsPortRPIDParserRuleCall_4_1_0_1; }

		//("as" name=ValidID displayName=STRING?)?
		public Group getGroup_5() { return cGroup_5; }

		//"as"
		public Keyword getAsKeyword_5_0() { return cAsKeyword_5_0; }

		//name=ValidID
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_1_0() { return cNameValidIDParserRuleCall_5_1_0; }

		//displayName=STRING?
		public Assignment getDisplayNameAssignment_5_2() { return cDisplayNameAssignment_5_2; }

		//STRING
		public RuleCall getDisplayNameSTRINGTerminalRuleCall_5_2_0() { return cDisplayNameSTRINGTerminalRuleCall_5_2_0; }
	}

	public class AtomicActorImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtomicActorImpl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractEntityActorImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCaltropActorImplParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AtomicActorImpl:
		//	AbstractEntityActorImpl | CaltropActorImpl;
		public ParserRule getRule() { return rule; }

		//AbstractEntityActorImpl | CaltropActorImpl
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractEntityActorImpl
		public RuleCall getAbstractEntityActorImplParserRuleCall_0() { return cAbstractEntityActorImplParserRuleCall_0; }

		//CaltropActorImpl
		public RuleCall getCaltropActorImplParserRuleCall_1() { return cCaltropActorImplParserRuleCall_1; }
	}

	public class AbstractEntityActorImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractEntityActorImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImplementationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cEntityActorImplAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cEntityAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cEntityEntityParserRuleCall_1_0_1_0 = (RuleCall)cEntityAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cEntityRefActorImplAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cRefEntityCrossReference_1_1_1_0 = (CrossReference)cRefAssignment_1_1_1.eContents().get(0);
		private final RuleCall cRefEntityQualifiedNameParserRuleCall_1_1_1_0_1 = (RuleCall)cRefEntityCrossReference_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cLessThanSignKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_2_1 = (Keyword)cGroup_1_1_2.eContents().get(1);
		
		//AbstractEntityActorImpl:
		//	"implementation" ({EntityActorImpl} entity=Entity | {EntityRefActorImpl} ref=[Entity|QualifiedName] ("<" ">")?);
		public ParserRule getRule() { return rule; }

		//"implementation" ({EntityActorImpl} entity=Entity | {EntityRefActorImpl} ref=[Entity|QualifiedName] ("<" ">")?)
		public Group getGroup() { return cGroup; }

		//"implementation"
		public Keyword getImplementationKeyword_0() { return cImplementationKeyword_0; }

		//{EntityActorImpl} entity=Entity | {EntityRefActorImpl} ref=[Entity|QualifiedName] ("<" ">")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{EntityActorImpl} entity=Entity
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{EntityActorImpl}
		public Action getEntityActorImplAction_1_0_0() { return cEntityActorImplAction_1_0_0; }

		//entity=Entity
		public Assignment getEntityAssignment_1_0_1() { return cEntityAssignment_1_0_1; }

		//Entity
		public RuleCall getEntityEntityParserRuleCall_1_0_1_0() { return cEntityEntityParserRuleCall_1_0_1_0; }

		//{EntityRefActorImpl} ref=[Entity|QualifiedName] ("<" ">")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{EntityRefActorImpl}
		public Action getEntityRefActorImplAction_1_1_0() { return cEntityRefActorImplAction_1_1_0; }

		//ref=[Entity|QualifiedName]
		public Assignment getRefAssignment_1_1_1() { return cRefAssignment_1_1_1; }

		//[Entity|QualifiedName]
		public CrossReference getRefEntityCrossReference_1_1_1_0() { return cRefEntityCrossReference_1_1_1_0; }

		//QualifiedName
		public RuleCall getRefEntityQualifiedNameParserRuleCall_1_1_1_0_1() { return cRefEntityQualifiedNameParserRuleCall_1_1_1_0_1; }

		//("<" ">")?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1_2_0() { return cLessThanSignKeyword_1_1_2_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_1_2_1() { return cGreaterThanSignKeyword_1_1_2_1; }
	}

	public class CaltropActorImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CaltropActorImpl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCaltropActorImplAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsStateVariableParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cInitActionsAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cInitActionsInitActionParserRuleCall_2_0_0_0 = (RuleCall)cInitActionsAssignment_2_0_0.eContents().get(0);
		private final Assignment cActionsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cActionsFireActionParserRuleCall_2_0_1_0 = (RuleCall)cActionsAssignment_2_0_1.eContents().get(0);
		private final Assignment cActionsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cActionsFireActionParserRuleCall_2_1_0 = (RuleCall)cActionsAssignment_2_1.eContents().get(0);
		
		//// Caltrop stuff
		//CaltropActorImpl:
		//	{CaltropActorImpl} declarations+=StateVariable* (initActions+=InitAction+ actions+=FireAction* // must have at least one action, whether init or fire
		//	| actions+=FireAction+);
		public ParserRule getRule() { return rule; }

		//{CaltropActorImpl} declarations+=StateVariable* (initActions+=InitAction+ actions+=FireAction* // must have at least one action, whether init or fire
		//| actions+=FireAction+)
		public Group getGroup() { return cGroup; }

		//{CaltropActorImpl}
		public Action getCaltropActorImplAction_0() { return cCaltropActorImplAction_0; }

		//declarations+=StateVariable*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//StateVariable
		public RuleCall getDeclarationsStateVariableParserRuleCall_1_0() { return cDeclarationsStateVariableParserRuleCall_1_0; }

		//initActions+=InitAction+ actions+=FireAction* // must have at least one action, whether init or fire
		//| actions+=FireAction+
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//initActions+=InitAction+ actions+=FireAction*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//initActions+=InitAction+
		public Assignment getInitActionsAssignment_2_0_0() { return cInitActionsAssignment_2_0_0; }

		//InitAction
		public RuleCall getInitActionsInitActionParserRuleCall_2_0_0_0() { return cInitActionsInitActionParserRuleCall_2_0_0_0; }

		//actions+=FireAction*
		public Assignment getActionsAssignment_2_0_1() { return cActionsAssignment_2_0_1; }

		//FireAction
		public RuleCall getActionsFireActionParserRuleCall_2_0_1_0() { return cActionsFireActionParserRuleCall_2_0_1_0; }

		//actions+=FireAction+
		public Assignment getActionsAssignment_2_1() { return cActionsAssignment_2_1; }

		//FireAction
		public RuleCall getActionsFireActionParserRuleCall_2_1_0() { return cActionsFireActionParserRuleCall_2_1_0; }
	}

	public class StateVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cConstantAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final Keyword cConstantValKeyword_0_0_0 = (Keyword)cConstantAssignment_0_0.eContents().get(0);
		private final Keyword cVarKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueExpressionXInitExpressionParserRuleCall_3_1_0 = (RuleCall)cValueExpressionAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//StateVariable:
		//	(constant?="val" | "var") type=JvmTypeReference name=ValidID ("=" valueExpression=XInitExpression ";")?;
		public ParserRule getRule() { return rule; }

		//(constant?="val" | "var") type=JvmTypeReference name=ValidID ("=" valueExpression=XInitExpression ";")?
		public Group getGroup() { return cGroup; }

		//constant?="val" | "var"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//constant?="val"
		public Assignment getConstantAssignment_0_0() { return cConstantAssignment_0_0; }

		//"val"
		public Keyword getConstantValKeyword_0_0_0() { return cConstantValKeyword_0_0_0; }

		//"var"
		public Keyword getVarKeyword_0_1() { return cVarKeyword_0_1; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("=" valueExpression=XInitExpression ";")?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//valueExpression=XInitExpression
		public Assignment getValueExpressionAssignment_3_1() { return cValueExpressionAssignment_3_1; }

		//XInitExpression
		public RuleCall getValueExpressionXInitExpressionParserRuleCall_3_1_0() { return cValueExpressionXInitExpressionParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
	}

	public class InitActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cInitializeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cMAPS_TOParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cOutputPatternsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cOutputPatternsOutputPatternParserRuleCall_4_0_0 = (RuleCall)cOutputPatternsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cOutputPatternsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cOutputPatternsOutputPatternParserRuleCall_4_1_1_0 = (RuleCall)cOutputPatternsAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cGuardKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cGuardExpressionXExpressionParserRuleCall_5_1_0 = (RuleCall)cGuardExpressionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDoKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cBodyExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cBodyExpressionXExpressionParserRuleCall_6_1_0 = (RuleCall)cBodyExpressionAssignment_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//InitAction returns OutputAction:
		//	{OutputAction} (name=ValidID ":")? "initialize" MAPS_TO (outputPatterns+=OutputPattern (","
		//	outputPatterns+=OutputPattern)*)? ("guard" guardExpression=XExpression)? //	(attributes+=ActionVariable)*
		//	("do" bodyExpression=XExpression ";")?;
		public ParserRule getRule() { return rule; }

		//{OutputAction} (name=ValidID ":")? "initialize" MAPS_TO (outputPatterns+=OutputPattern (","
		//outputPatterns+=OutputPattern)*)? ("guard" guardExpression=XExpression)? //	(attributes+=ActionVariable)*
		//("do" bodyExpression=XExpression ";")?
		public Group getGroup() { return cGroup; }

		//{OutputAction}
		public Action getOutputActionAction_0() { return cOutputActionAction_0; }

		//(name=ValidID ":")?
		public Group getGroup_1() { return cGroup_1; }

		//name=ValidID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0_0() { return cNameValidIDParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//"initialize"
		public Keyword getInitializeKeyword_2() { return cInitializeKeyword_2; }

		//MAPS_TO
		public RuleCall getMAPS_TOParserRuleCall_3() { return cMAPS_TOParserRuleCall_3; }

		//(outputPatterns+=OutputPattern ("," outputPatterns+=OutputPattern)*)?
		public Group getGroup_4() { return cGroup_4; }

		//outputPatterns+=OutputPattern
		public Assignment getOutputPatternsAssignment_4_0() { return cOutputPatternsAssignment_4_0; }

		//OutputPattern
		public RuleCall getOutputPatternsOutputPatternParserRuleCall_4_0_0() { return cOutputPatternsOutputPatternParserRuleCall_4_0_0; }

		//("," outputPatterns+=OutputPattern)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//outputPatterns+=OutputPattern
		public Assignment getOutputPatternsAssignment_4_1_1() { return cOutputPatternsAssignment_4_1_1; }

		//OutputPattern
		public RuleCall getOutputPatternsOutputPatternParserRuleCall_4_1_1_0() { return cOutputPatternsOutputPatternParserRuleCall_4_1_1_0; }

		//("guard" guardExpression=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"guard"
		public Keyword getGuardKeyword_5_0() { return cGuardKeyword_5_0; }

		//guardExpression=XExpression
		public Assignment getGuardExpressionAssignment_5_1() { return cGuardExpressionAssignment_5_1; }

		//XExpression
		public RuleCall getGuardExpressionXExpressionParserRuleCall_5_1_0() { return cGuardExpressionXExpressionParserRuleCall_5_1_0; }

		//("do" bodyExpression=XExpression ";")?
		public Group getGroup_6() { return cGroup_6; }

		//"do"
		public Keyword getDoKeyword_6_0() { return cDoKeyword_6_0; }

		//bodyExpression=XExpression
		public Assignment getBodyExpressionAssignment_6_1() { return cBodyExpressionAssignment_6_1; }

		//XExpression
		public RuleCall getBodyExpressionXExpressionParserRuleCall_6_1_0() { return cBodyExpressionXExpressionParserRuleCall_6_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6_2() { return cSemicolonKeyword_6_2; }
	}

	public class FireActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FireAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFireActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cActionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInputPatternsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInputPatternsInputPatternParserRuleCall_3_0_0 = (RuleCall)cInputPatternsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInputPatternsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInputPatternsInputPatternParserRuleCall_3_1_1_0 = (RuleCall)cInputPatternsAssignment_3_1_1.eContents().get(0);
		private final RuleCall cMAPS_TOParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cOutputPatternsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cOutputPatternsOutputPatternParserRuleCall_5_0_0 = (RuleCall)cOutputPatternsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cOutputPatternsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cOutputPatternsOutputPatternParserRuleCall_5_1_1_0 = (RuleCall)cOutputPatternsAssignment_5_1_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGuardKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGuardExpressionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cGuardExpressionXExpressionParserRuleCall_6_1_0 = (RuleCall)cGuardExpressionAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDoKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cBodyExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cBodyExpressionXExpressionParserRuleCall_7_1_0 = (RuleCall)cBodyExpressionAssignment_7_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		
		//FireAction:
		//	{FireAction} (name=ValidID ":")? "action" (inputPatterns+=InputPattern ("," inputPatterns+=InputPattern)*)? MAPS_TO
		//	(outputPatterns+=OutputPattern ("," outputPatterns+=OutputPattern)*)? ("guard" guardExpression=XExpression)? //	(attributes+=ActionVariable)*
		//	("do" bodyExpression=XExpression ";")?;
		public ParserRule getRule() { return rule; }

		//{FireAction} (name=ValidID ":")? "action" (inputPatterns+=InputPattern ("," inputPatterns+=InputPattern)*)? MAPS_TO
		//(outputPatterns+=OutputPattern ("," outputPatterns+=OutputPattern)*)? ("guard" guardExpression=XExpression)? //	(attributes+=ActionVariable)*
		//("do" bodyExpression=XExpression ";")?
		public Group getGroup() { return cGroup; }

		//{FireAction}
		public Action getFireActionAction_0() { return cFireActionAction_0; }

		//(name=ValidID ":")?
		public Group getGroup_1() { return cGroup_1; }

		//name=ValidID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0_0() { return cNameValidIDParserRuleCall_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//"action"
		public Keyword getActionKeyword_2() { return cActionKeyword_2; }

		//(inputPatterns+=InputPattern ("," inputPatterns+=InputPattern)*)?
		public Group getGroup_3() { return cGroup_3; }

		//inputPatterns+=InputPattern
		public Assignment getInputPatternsAssignment_3_0() { return cInputPatternsAssignment_3_0; }

		//InputPattern
		public RuleCall getInputPatternsInputPatternParserRuleCall_3_0_0() { return cInputPatternsInputPatternParserRuleCall_3_0_0; }

		//("," inputPatterns+=InputPattern)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//inputPatterns+=InputPattern
		public Assignment getInputPatternsAssignment_3_1_1() { return cInputPatternsAssignment_3_1_1; }

		//InputPattern
		public RuleCall getInputPatternsInputPatternParserRuleCall_3_1_1_0() { return cInputPatternsInputPatternParserRuleCall_3_1_1_0; }

		//MAPS_TO
		public RuleCall getMAPS_TOParserRuleCall_4() { return cMAPS_TOParserRuleCall_4; }

		//(outputPatterns+=OutputPattern ("," outputPatterns+=OutputPattern)*)?
		public Group getGroup_5() { return cGroup_5; }

		//outputPatterns+=OutputPattern
		public Assignment getOutputPatternsAssignment_5_0() { return cOutputPatternsAssignment_5_0; }

		//OutputPattern
		public RuleCall getOutputPatternsOutputPatternParserRuleCall_5_0_0() { return cOutputPatternsOutputPatternParserRuleCall_5_0_0; }

		//("," outputPatterns+=OutputPattern)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//outputPatterns+=OutputPattern
		public Assignment getOutputPatternsAssignment_5_1_1() { return cOutputPatternsAssignment_5_1_1; }

		//OutputPattern
		public RuleCall getOutputPatternsOutputPatternParserRuleCall_5_1_1_0() { return cOutputPatternsOutputPatternParserRuleCall_5_1_1_0; }

		//("guard" guardExpression=XExpression)?
		public Group getGroup_6() { return cGroup_6; }

		//"guard"
		public Keyword getGuardKeyword_6_0() { return cGuardKeyword_6_0; }

		//guardExpression=XExpression
		public Assignment getGuardExpressionAssignment_6_1() { return cGuardExpressionAssignment_6_1; }

		//XExpression
		public RuleCall getGuardExpressionXExpressionParserRuleCall_6_1_0() { return cGuardExpressionXExpressionParserRuleCall_6_1_0; }

		//("do" bodyExpression=XExpression ";")?
		public Group getGroup_7() { return cGroup_7; }

		//"do"
		public Keyword getDoKeyword_7_0() { return cDoKeyword_7_0; }

		//bodyExpression=XExpression
		public Assignment getBodyExpressionAssignment_7_1() { return cBodyExpressionAssignment_7_1; }

		//XExpression
		public RuleCall getBodyExpressionXExpressionParserRuleCall_7_1_0() { return cBodyExpressionXExpressionParserRuleCall_7_1_0; }

		//";"
		public Keyword getSemicolonKeyword_7_2() { return cSemicolonKeyword_7_2; }
	}

	public class LIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LID");
		private final RuleCall cValidIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LID:
		//	ValidID;
		public ParserRule getRule() { return rule; }

		//ValidID
		public RuleCall getValidIDParserRuleCall() { return cValidIDParserRuleCall; }
	}

	public class InputPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInputPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPortRefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cPortRefPortCrossReference_1_0_0 = (CrossReference)cPortRefAssignment_1_0.eContents().get(0);
		private final RuleCall cPortRefPortLIDParserRuleCall_1_0_0_1 = (RuleCall)cPortRefPortCrossReference_1_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cVariablesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cVariablesValidIDParserRuleCall_3_0_0 = (RuleCall)cVariablesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cVariablesValidIDParserRuleCall_3_1_1_0 = (RuleCall)cVariablesAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRepeatKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRepeatExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRepeatExpressionXExpressionParserRuleCall_5_1_0 = (RuleCall)cRepeatExpressionAssignment_5_1.eContents().get(0);
		private final Assignment cChannelsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cChannelsChannelSelectorParserRuleCall_6_0 = (RuleCall)cChannelsAssignment_6.eContents().get(0);
		
		//InputPattern:
		//	{InputPattern} (portRef=[Port|LID] ":")? "[" (variables+=ValidID ("," variables+=ValidID)*)? "]" ("repeat"
		//	repeatExpression=XExpression)? channels=ChannelSelector?;
		public ParserRule getRule() { return rule; }

		//{InputPattern} (portRef=[Port|LID] ":")? "[" (variables+=ValidID ("," variables+=ValidID)*)? "]" ("repeat"
		//repeatExpression=XExpression)? channels=ChannelSelector?
		public Group getGroup() { return cGroup; }

		//{InputPattern}
		public Action getInputPatternAction_0() { return cInputPatternAction_0; }

		//(portRef=[Port|LID] ":")?
		public Group getGroup_1() { return cGroup_1; }

		//portRef=[Port|LID]
		public Assignment getPortRefAssignment_1_0() { return cPortRefAssignment_1_0; }

		//[Port|LID]
		public CrossReference getPortRefPortCrossReference_1_0_0() { return cPortRefPortCrossReference_1_0_0; }

		//LID
		public RuleCall getPortRefPortLIDParserRuleCall_1_0_0_1() { return cPortRefPortLIDParserRuleCall_1_0_0_1; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//(variables+=ValidID ("," variables+=ValidID)*)?
		public Group getGroup_3() { return cGroup_3; }

		//variables+=ValidID
		public Assignment getVariablesAssignment_3_0() { return cVariablesAssignment_3_0; }

		//ValidID
		public RuleCall getVariablesValidIDParserRuleCall_3_0_0() { return cVariablesValidIDParserRuleCall_3_0_0; }

		//("," variables+=ValidID)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//variables+=ValidID
		public Assignment getVariablesAssignment_3_1_1() { return cVariablesAssignment_3_1_1; }

		//ValidID
		public RuleCall getVariablesValidIDParserRuleCall_3_1_1_0() { return cVariablesValidIDParserRuleCall_3_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//("repeat" repeatExpression=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"repeat"
		public Keyword getRepeatKeyword_5_0() { return cRepeatKeyword_5_0; }

		//repeatExpression=XExpression
		public Assignment getRepeatExpressionAssignment_5_1() { return cRepeatExpressionAssignment_5_1; }

		//XExpression
		public RuleCall getRepeatExpressionXExpressionParserRuleCall_5_1_0() { return cRepeatExpressionXExpressionParserRuleCall_5_1_0; }

		//channels=ChannelSelector?
		public Assignment getChannelsAssignment_6() { return cChannelsAssignment_6; }

		//ChannelSelector
		public RuleCall getChannelsChannelSelectorParserRuleCall_6_0() { return cChannelsChannelSelectorParserRuleCall_6_0; }
	}

	public class ChannelSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChannelSelector");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionChannelSelectorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordChannelSelectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ChannelSelector:
		//	ExpressionChannelSelector | KeywordChannelSelector;
		public ParserRule getRule() { return rule; }

		//ExpressionChannelSelector | KeywordChannelSelector
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionChannelSelector
		public RuleCall getExpressionChannelSelectorParserRuleCall_0() { return cExpressionChannelSelectorParserRuleCall_0; }

		//KeywordChannelSelector
		public RuleCall getKeywordChannelSelectorParserRuleCall_1() { return cKeywordChannelSelectorParserRuleCall_1; }
	}

	public class ExpressionChannelSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionChannelSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionChannelSelectorAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAtKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cManyAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cManyAtKeyword_1_1_0 = (Keyword)cManyAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cKeyExpressionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cKeyExpressionsXExpressionParserRuleCall_3_0 = (RuleCall)cKeyExpressionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cKeyExpressionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cKeyExpressionsXExpressionParserRuleCall_4_1_0 = (RuleCall)cKeyExpressionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ExpressionChannelSelector:
		//	{ExpressionChannelSelector} ("at" | many?="at*") "{" keyExpressions+=XExpression ("," keyExpressions+=XExpression)*
		//	"}";
		public ParserRule getRule() { return rule; }

		//{ExpressionChannelSelector} ("at" | many?="at*") "{" keyExpressions+=XExpression ("," keyExpressions+=XExpression)* "}"
		public Group getGroup() { return cGroup; }

		//{ExpressionChannelSelector}
		public Action getExpressionChannelSelectorAction_0() { return cExpressionChannelSelectorAction_0; }

		//"at" | many?="at*"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"at"
		public Keyword getAtKeyword_1_0() { return cAtKeyword_1_0; }

		//many?="at*"
		public Assignment getManyAssignment_1_1() { return cManyAssignment_1_1; }

		//"at*"
		public Keyword getManyAtKeyword_1_1_0() { return cManyAtKeyword_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//keyExpressions+=XExpression
		public Assignment getKeyExpressionsAssignment_3() { return cKeyExpressionsAssignment_3; }

		//XExpression
		public RuleCall getKeyExpressionsXExpressionParserRuleCall_3_0() { return cKeyExpressionsXExpressionParserRuleCall_3_0; }

		//("," keyExpressions+=XExpression)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//keyExpressions+=XExpression
		public Assignment getKeyExpressionsAssignment_4_1() { return cKeyExpressionsAssignment_4_1; }

		//XExpression
		public RuleCall getKeyExpressionsXExpressionParserRuleCall_4_1_0() { return cKeyExpressionsXExpressionParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class KeywordChannelSelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeywordChannelSelector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeywordAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeywordChannelSelectorKeywordEnumRuleCall_1_0 = (RuleCall)cKeywordAssignment_1.eContents().get(0);
		
		//KeywordChannelSelector:
		//	"at"? keyword=ChannelSelectorKeyword;
		public ParserRule getRule() { return rule; }

		//"at"? keyword=ChannelSelectorKeyword
		public Group getGroup() { return cGroup; }

		//"at"?
		public Keyword getAtKeyword_0() { return cAtKeyword_0; }

		//keyword=ChannelSelectorKeyword
		public Assignment getKeywordAssignment_1() { return cKeywordAssignment_1; }

		//ChannelSelectorKeyword
		public RuleCall getKeywordChannelSelectorKeywordEnumRuleCall_1_0() { return cKeywordChannelSelectorKeywordEnumRuleCall_1_0; }
	}

	public class OutputPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputPattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOutputPatternAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPortRefAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cPortRefPortCrossReference_1_0_0 = (CrossReference)cPortRefAssignment_1_0.eContents().get(0);
		private final RuleCall cPortRefPortLIDParserRuleCall_1_0_0_1 = (RuleCall)cPortRefPortCrossReference_1_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cValueExpressionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cValueExpressionsXExpressionParserRuleCall_3_0_0 = (RuleCall)cValueExpressionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cValueExpressionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cValueExpressionsXExpressionParserRuleCall_3_1_1_0 = (RuleCall)cValueExpressionsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRepeatKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRepeatExpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRepeatExpressionXExpressionParserRuleCall_5_1_0 = (RuleCall)cRepeatExpressionAssignment_5_1.eContents().get(0);
		private final Assignment cChannelsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cChannelsChannelSelectorParserRuleCall_6_0 = (RuleCall)cChannelsAssignment_6.eContents().get(0);
		
		//OutputPattern:
		//	{OutputPattern} (portRef=[Port|LID] ":")? "[" (valueExpressions+=XExpression ("," valueExpressions+=XExpression)*)?
		//	"]" ("repeat" repeatExpression=XExpression)? channels=ChannelSelector?;
		public ParserRule getRule() { return rule; }

		//{OutputPattern} (portRef=[Port|LID] ":")? "[" (valueExpressions+=XExpression ("," valueExpressions+=XExpression)*)? "]"
		//("repeat" repeatExpression=XExpression)? channels=ChannelSelector?
		public Group getGroup() { return cGroup; }

		//{OutputPattern}
		public Action getOutputPatternAction_0() { return cOutputPatternAction_0; }

		//(portRef=[Port|LID] ":")?
		public Group getGroup_1() { return cGroup_1; }

		//portRef=[Port|LID]
		public Assignment getPortRefAssignment_1_0() { return cPortRefAssignment_1_0; }

		//[Port|LID]
		public CrossReference getPortRefPortCrossReference_1_0_0() { return cPortRefPortCrossReference_1_0_0; }

		//LID
		public RuleCall getPortRefPortLIDParserRuleCall_1_0_0_1() { return cPortRefPortLIDParserRuleCall_1_0_0_1; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//(valueExpressions+=XExpression ("," valueExpressions+=XExpression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//valueExpressions+=XExpression
		public Assignment getValueExpressionsAssignment_3_0() { return cValueExpressionsAssignment_3_0; }

		//XExpression
		public RuleCall getValueExpressionsXExpressionParserRuleCall_3_0_0() { return cValueExpressionsXExpressionParserRuleCall_3_0_0; }

		//("," valueExpressions+=XExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//valueExpressions+=XExpression
		public Assignment getValueExpressionsAssignment_3_1_1() { return cValueExpressionsAssignment_3_1_1; }

		//XExpression
		public RuleCall getValueExpressionsXExpressionParserRuleCall_3_1_1_0() { return cValueExpressionsXExpressionParserRuleCall_3_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//("repeat" repeatExpression=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"repeat"
		public Keyword getRepeatKeyword_5_0() { return cRepeatKeyword_5_0; }

		//repeatExpression=XExpression
		public Assignment getRepeatExpressionAssignment_5_1() { return cRepeatExpressionAssignment_5_1; }

		//XExpression
		public RuleCall getRepeatExpressionXExpressionParserRuleCall_5_1_0() { return cRepeatExpressionXExpressionParserRuleCall_5_1_0; }

		//channels=ChannelSelector?
		public Assignment getChannelsAssignment_6() { return cChannelsAssignment_6; }

		//ChannelSelector
		public RuleCall getChannelsChannelSelectorParserRuleCall_6_0() { return cChannelsChannelSelectorParserRuleCall_6_0; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXFeatureCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXIfExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXForLoopExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXWhileExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXDoWhileExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXThrowExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXReturnExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//// XBase overrides
		////OldActionVariableValueRef: 
		////	'old' feature=[types::JvmField|ID]
		////;
		////StepActionVariableValueRef returns xbase::XExpression: 
		////	{xbase::XFeatureCall} feature=[types::JvmField|'step']
		////;
		//XPrimaryExpression returns xbase::XExpression:
		//	XConstructorCall | XBlockExpression | XSwitchExpression | //	OldActionVariableValueRef | // StepActionVariableValueRef |
		//	XFeatureCall | XLiteral | XIfExpression | XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression
		//	| XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | //	OldActionVariableValueRef | // StepActionVariableValueRef |
		//XFeatureCall | XLiteral | XIfExpression | XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression
		//| XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		////	OldActionVariableValueRef | // StepActionVariableValueRef |
		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_3() { return cXFeatureCallParserRuleCall_3; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_4() { return cXLiteralParserRuleCall_4; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_5() { return cXIfExpressionParserRuleCall_5; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_6() { return cXForLoopExpressionParserRuleCall_6; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_7() { return cXWhileExpressionParserRuleCall_7; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_8() { return cXDoWhileExpressionParserRuleCall_8; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_9() { return cXThrowExpressionParserRuleCall_9; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_10() { return cXReturnExpressionParserRuleCall_10; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_11() { return cXTryCatchFinallyExpressionParserRuleCall_11; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_12() { return cXParenthesizedExpressionParserRuleCall_12; }
	}

	public class XUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_0_1_0 = (CrossReference)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_0_1_0.eContents().get(1);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandXOther2OperatorExpressionParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cXOther2OperatorExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// support # index operator, with highest priority
		//XUnaryOperation returns xbase::XExpression:
		//	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XOther2OperatorExpression |
		//	XOther2OperatorExpression;
		public ParserRule getRule() { return rule; }

		//{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XOther2OperatorExpression |
		//XOther2OperatorExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XOther2OperatorExpression
		public Group getGroup_0() { return cGroup_0; }

		//{xbase::XUnaryOperation}
		public Action getXUnaryOperationAction_0_0() { return cXUnaryOperationAction_0_0; }

		//feature=[types::JvmIdentifiableElement|OpUnary]
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//[types::JvmIdentifiableElement|OpUnary]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_0_1_0; }

		//OpUnary
		public RuleCall getFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1() { return cFeatureJvmIdentifiableElementOpUnaryParserRuleCall_0_1_0_1; }

		//operand=XOther2OperatorExpression
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//XOther2OperatorExpression
		public RuleCall getOperandXOther2OperatorExpressionParserRuleCall_0_2_0() { return cOperandXOther2OperatorExpressionParserRuleCall_0_2_0; }

		//XOther2OperatorExpression
		public RuleCall getXOther2OperatorExpressionParserRuleCall_1() { return cXOther2OperatorExpressionParserRuleCall_1; }
	}

	public class XOther2OperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOther2OperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXCastedExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final CrossReference cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0 = (CrossReference)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final RuleCall cFeatureJvmIdentifiableElementOpOther2ParserRuleCall_1_0_0_1_0_1 = (RuleCall)cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0.eContents().get(1);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXCastedExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XOther2OperatorExpression returns xbase::XExpression:
		//	XCastedExpression (=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther2])
		//	rightOperand=XCastedExpression)*;
		public ParserRule getRule() { return rule; }

		//XCastedExpression (=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther2])
		//rightOperand=XCastedExpression)*
		public Group getGroup() { return cGroup; }

		//XCastedExpression
		public RuleCall getXCastedExpressionParserRuleCall_0() { return cXCastedExpressionParserRuleCall_0; }

		//(=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther2])
		//rightOperand=XCastedExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther2])
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther2]
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{xbase::XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=[types::JvmIdentifiableElement|OpOther2]
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//[types::JvmIdentifiableElement|OpOther2]
		public CrossReference getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0() { return cFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0; }

		//OpOther2
		public RuleCall getFeatureJvmIdentifiableElementOpOther2ParserRuleCall_1_0_0_1_0_1() { return cFeatureJvmIdentifiableElementOpOther2ParserRuleCall_1_0_0_1_0_1; }

		//rightOperand=XCastedExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XCastedExpression
		public RuleCall getRightOperandXCastedExpressionParserRuleCall_1_1_0() { return cRightOperandXCastedExpressionParserRuleCall_1_1_0; }
	}

	public class OpOther2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOther2");
		private final Keyword cNumberSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOther2:
		//	"#";
		public ParserRule getRule() { return rule; }

		//"#"
		public Keyword getNumberSignKeyword() { return cNumberSignKeyword; }
	}
	
	
	public class IOPortKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "IOPortKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINPUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINPUTGreaterThanSignVerticalLineKeyword_0_0 = (Keyword)cINPUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTPUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTPUTVerticalLineGreaterThanSignKeyword_1_0 = (Keyword)cOUTPUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINPUT_OUTPUTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINPUT_OUTPUTGreaterThanSignVerticalLineGreaterThanSignKeyword_2_0 = (Keyword)cINPUT_OUTPUTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum IOPortKind:
		//	INPUT=">|" | OUTPUT="|>" | INPUT_OUTPUT=">|>";
		public EnumRule getRule() { return rule; }

		//INPUT=">|" | OUTPUT="|>" | INPUT_OUTPUT=">|>"
		public Alternatives getAlternatives() { return cAlternatives; }

		//INPUT=">|"
		public EnumLiteralDeclaration getINPUTEnumLiteralDeclaration_0() { return cINPUTEnumLiteralDeclaration_0; }

		//">|"
		public Keyword getINPUTGreaterThanSignVerticalLineKeyword_0_0() { return cINPUTGreaterThanSignVerticalLineKeyword_0_0; }

		//OUTPUT="|>"
		public EnumLiteralDeclaration getOUTPUTEnumLiteralDeclaration_1() { return cOUTPUTEnumLiteralDeclaration_1; }

		//"|>"
		public Keyword getOUTPUTVerticalLineGreaterThanSignKeyword_1_0() { return cOUTPUTVerticalLineGreaterThanSignKeyword_1_0; }

		//INPUT_OUTPUT=">|>"
		public EnumLiteralDeclaration getINPUT_OUTPUTEnumLiteralDeclaration_2() { return cINPUT_OUTPUTEnumLiteralDeclaration_2; }

		//">|>"
		public Keyword getINPUT_OUTPUTGreaterThanSignVerticalLineGreaterThanSignKeyword_2_0() { return cINPUT_OUTPUTGreaterThanSignVerticalLineGreaterThanSignKeyword_2_0; }
	}

	public class ChannelSelectorKeywordElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ChannelSelectorKeyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cALLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cALLAllKeyword_0_0 = (Keyword)cALLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cANYAnyKeyword_1_0 = (Keyword)cANYEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ChannelSelectorKeyword:
		//	ALL="all" | ANY="any";
		public EnumRule getRule() { return rule; }

		//ALL="all" | ANY="any"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ALL="all"
		public EnumLiteralDeclaration getALLEnumLiteralDeclaration_0() { return cALLEnumLiteralDeclaration_0; }

		//"all"
		public Keyword getALLAllKeyword_0_0() { return cALLAllKeyword_0_0; }

		//ANY="any"
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_1() { return cANYEnumLiteralDeclaration_1; }

		//"any"
		public Keyword getANYAnyKeyword_1_0() { return cANYAnyKeyword_1_0; }
	}
	
	private ActorModelElements pActorModel;
	private EntityFolderElements pEntityFolder;
	private ImportDirectiveElements pImportDirective;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private EntityElements pEntity;
	private ActorRefElements pActorRef;
	private XInitExpressionElements pXInitExpression;
	private ParameterBindingElements pParameterBinding;
	private IS_AElements pIS_A;
	private MAPS_TOElements pMAPS_TO;
	private TypedAtomicActorElements pTypedAtomicActor;
	private TypeParameterElements pTypeParameter;
	private InstanceParameterBindingElements pInstanceParameterBinding;
	private InstanceActorRefElements pInstanceActorRef;
	private TypedAtomicActorInstanceElements pTypedAtomicActorInstance;
	private CompositeEntityElements pCompositeEntity;
	private AttributeElements pAttribute;
	private InjectableAttributeElements pInjectableAttribute;
	private VariableElements pVariable;
	private ActorParameterElements pActorParameter;
	private PortElements pPort;
	private AnnotationAttributeElements pAnnotationAttribute;
	private PlainPortElements pPlainPort;
	private PortTypeReferenceElements pPortTypeReference;
	private IOPortKindElements unknownRuleIOPortKind;
	private TypedIOPortElements pTypedIOPort;
	private TypedInputPortElements pTypedInputPort;
	private TypedOutputPortElements pTypedOutputPort;
	private RPIDElements pRPID;
	private RelationElements pRelation;
	private AtomicActorImplElements pAtomicActorImpl;
	private AbstractEntityActorImplElements pAbstractEntityActorImpl;
	private CaltropActorImplElements pCaltropActorImpl;
	private StateVariableElements pStateVariable;
	private InitActionElements pInitAction;
	private FireActionElements pFireAction;
	private LIDElements pLID;
	private InputPatternElements pInputPattern;
	private ChannelSelectorElements pChannelSelector;
	private ExpressionChannelSelectorElements pExpressionChannelSelector;
	private KeywordChannelSelectorElements pKeywordChannelSelector;
	private ChannelSelectorKeywordElements unknownRuleChannelSelectorKeyword;
	private OutputPatternElements pOutputPattern;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XUnaryOperationElements pXUnaryOperation;
	private XOther2OperatorExpressionElements pXOther2OperatorExpression;
	private OpOther2Elements pOpOther2;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public XActorGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ptolemy.xtext.XActor".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//ActorModel:
	//	{ActorModel} "model" name=QualifiedName displayName=STRING? imports+=ImportDirective* attributes+=Attribute*
	//	entityContainers+=EntityFolder* entities+=Entity* relations+=Relation*;
	public ActorModelElements getActorModelAccess() {
		return (pActorModel != null) ? pActorModel : (pActorModel = new ActorModelElements());
	}
	
	public ParserRule getActorModelRule() {
		return getActorModelAccess().getRule();
	}

	//EntityFolder:
	//	{EntityFolder} "container" name=ValidID displayName=STRING? attributes+=Attribute* "{" (entities+=Entity |
	//	entityContainers+=EntityFolder)* "}";
	public EntityFolderElements getEntityFolderAccess() {
		return (pEntityFolder != null) ? pEntityFolder : (pEntityFolder = new EntityFolderElements());
	}
	
	public ParserRule getEntityFolderRule() {
		return getEntityFolderAccess().getRule();
	}

	//ImportDirective:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportDirectiveElements getImportDirectiveAccess() {
		return (pImportDirective != null) ? pImportDirective : (pImportDirective = new ImportDirectiveElements());
	}
	
	public ParserRule getImportDirectiveRule() {
		return getImportDirectiveAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//Entity:
	//	TypedAtomicActor | TypedAtomicActorInstance | CompositeEntity;
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//ActorRef:
	//	ref=[Entity|QualifiedName] ("<" typeArguments+=JvmTypeReference ("," typeArguments+=JvmTypeReference)* ">")? ("("
	//	parameterBindings+=ParameterBinding ("," parameterBindings+=ParameterBinding)* ")")?;
	public ActorRefElements getActorRefAccess() {
		return (pActorRef != null) ? pActorRef : (pActorRef = new ActorRefElements());
	}
	
	public ParserRule getActorRefRule() {
		return getActorRefAccess().getRule();
	}

	//XInitExpression returns xbase::XExpression:
	//	XOrExpression;
	public XInitExpressionElements getXInitExpressionAccess() {
		return (pXInitExpression != null) ? pXInitExpression : (pXInitExpression = new XInitExpressionElements());
	}
	
	public ParserRule getXInitExpressionRule() {
		return getXInitExpressionAccess().getRule();
	}

	//ParameterBinding:
	//	(parameterRef=[Parameter|ValidID] "=")? valueExpression=XInitExpression;
	public ParameterBindingElements getParameterBindingAccess() {
		return (pParameterBinding != null) ? pParameterBinding : (pParameterBinding = new ParameterBindingElements());
	}
	
	public ParserRule getParameterBindingRule() {
		return getParameterBindingAccess().getRule();
	}

	//IS_A:
	//	"is";
	public IS_AElements getIS_AAccess() {
		return (pIS_A != null) ? pIS_A : (pIS_A = new IS_AElements());
	}
	
	public ParserRule getIS_ARule() {
		return getIS_AAccess().getRule();
	}

	//MAPS_TO:
	//	"==>";
	public MAPS_TOElements getMAPS_TOAccess() {
		return (pMAPS_TO != null) ? pMAPS_TO : (pMAPS_TO = new MAPS_TOElements());
	}
	
	public ParserRule getMAPS_TORule() {
		return getMAPS_TOAccess().getRule();
	}

	//TypedAtomicActor:
	//	{TypedAtomicActor} "actor" name=ValidID displayName=STRING? ("<" typeParameters+=TypeParameter (","
	//	typeParameters+=TypeParameter)* ">")? ("(" attributes+=ActorParameter ("," attributes+=ActorParameter)* ")")?
	//	((ports+=TypedInputPort ("," ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort (","
	//	ports+=TypedOutputPort)*)?)? (IS_A superEntity=ActorRef)? ports+=Port* attributes+=Attribute* impl=AtomicActorImpl?;
	public TypedAtomicActorElements getTypedAtomicActorAccess() {
		return (pTypedAtomicActor != null) ? pTypedAtomicActor : (pTypedAtomicActor = new TypedAtomicActorElements());
	}
	
	public ParserRule getTypedAtomicActorRule() {
		return getTypedAtomicActorAccess().getRule();
	}

	//TypeParameter:
	//	name=ID ("extends" type=JvmTypeReference)?;
	public TypeParameterElements getTypeParameterAccess() {
		return (pTypeParameter != null) ? pTypeParameter : (pTypeParameter = new TypeParameterElements());
	}
	
	public ParserRule getTypeParameterRule() {
		return getTypeParameterAccess().getRule();
	}

	//InstanceParameterBinding returns ParameterBinding:
	//	(parameterRef=[Parameter|ValidID] "=")? valueExpression=(XBooleanLiteral | XNumberLiteral | XStringLiteral);
	public InstanceParameterBindingElements getInstanceParameterBindingAccess() {
		return (pInstanceParameterBinding != null) ? pInstanceParameterBinding : (pInstanceParameterBinding = new InstanceParameterBindingElements());
	}
	
	public ParserRule getInstanceParameterBindingRule() {
		return getInstanceParameterBindingAccess().getRule();
	}

	//InstanceActorRef returns ActorRef:
	//	ref=[Entity|QualifiedName] ("(" parameterBindings+=InstanceParameterBinding (","
	//	parameterBindings+=InstanceParameterBinding)* ")")?;
	public InstanceActorRefElements getInstanceActorRefAccess() {
		return (pInstanceActorRef != null) ? pInstanceActorRef : (pInstanceActorRef = new InstanceActorRefElements());
	}
	
	public ParserRule getInstanceActorRefRule() {
		return getInstanceActorRefAccess().getRule();
	}

	//TypedAtomicActorInstance returns TypedAtomicActor:
	//	{TypedAtomicActor} "instance" name=ValidID displayName=STRING? IS_A superEntity=InstanceActorRef;
	public TypedAtomicActorInstanceElements getTypedAtomicActorInstanceAccess() {
		return (pTypedAtomicActorInstance != null) ? pTypedAtomicActorInstance : (pTypedAtomicActorInstance = new TypedAtomicActorInstanceElements());
	}
	
	public ParserRule getTypedAtomicActorInstanceRule() {
		return getTypedAtomicActorInstanceAccess().getRule();
	}

	//CompositeEntity:
	//	("entity" name=ValidID displayName=STRING? (IS_A superEntity=ActorRef)? | ({TypedCompositeActor} "composite"
	//	name=ValidID displayName=STRING? ("<" typeParameters+=TypeParameter ("," typeParameters+=TypeParameter)* ">")? ("("
	//	attributes+=ActorParameter ("," attributes+=ActorParameter)* ")")? ((ports+=TypedInputPort (","
	//	ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort ("," ports+=TypedOutputPort)*)?)?) (IS_A
	//	superEntity=ActorRef)?) ports+=Port* attributes+=Attribute* "{" entities+=Entity* relations+=Relation* "}";
	public CompositeEntityElements getCompositeEntityAccess() {
		return (pCompositeEntity != null) ? pCompositeEntity : (pCompositeEntity = new CompositeEntityElements());
	}
	
	public ParserRule getCompositeEntityRule() {
		return getCompositeEntityAccess().getRule();
	}

	//Attribute:
	//	InjectableAttribute | Variable;
	public AttributeElements getAttributeAccess() {
		return (pAttribute != null) ? pAttribute : (pAttribute = new AttributeElements());
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//InjectableAttribute:
	//	"-" type=JvmTypeReference name=ValidID displayName=STRING?;
	public InjectableAttributeElements getInjectableAttributeAccess() {
		return (pInjectableAttribute != null) ? pInjectableAttribute : (pInjectableAttribute = new InjectableAttributeElements());
	}
	
	public ParserRule getInjectableAttributeRule() {
		return getInjectableAttributeAccess().getRule();
	}

	//Variable:
	//	("+" | {Parameter} "*") type=JvmTypeReference name=ValidID displayName=STRING? ("=" valueExpression=XInitExpression
	//	";")?;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//ActorParameter:
	//	type=JvmTypeReference name=ValidID displayName=STRING? ("=" valueExpression=XInitExpression)?;
	public ActorParameterElements getActorParameterAccess() {
		return (pActorParameter != null) ? pActorParameter : (pActorParameter = new ActorParameterElements());
	}
	
	public ParserRule getActorParameterRule() {
		return getActorParameterAccess().getRule();
	}

	//Port:
	//	(PlainPort | TypedIOPort) ("@" attributes+=AnnotationAttribute)*;
	public PortElements getPortAccess() {
		return (pPort != null) ? pPort : (pPort = new PortElements());
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}

	//AnnotationAttribute returns Attribute:
	//	{Parameter} type=PortTypeReference? name=ValidID "=" valueExpression=XInitExpression ";";
	public AnnotationAttributeElements getAnnotationAttributeAccess() {
		return (pAnnotationAttribute != null) ? pAnnotationAttribute : (pAnnotationAttribute = new AnnotationAttributeElements());
	}
	
	public ParserRule getAnnotationAttributeRule() {
		return getAnnotationAttributeAccess().getRule();
	}

	//PlainPort returns Port:
	//	{Port} "->" name=ValidID displayName=STRING?;
	public PlainPortElements getPlainPortAccess() {
		return (pPlainPort != null) ? pPlainPort : (pPlainPort = new PlainPortElements());
	}
	
	public ParserRule getPlainPortRule() {
		return getPlainPortAccess().getRule();
	}

	//PortTypeReference returns types::JvmTypeReference:
	//	JvmParameterizedTypeReference;
	public PortTypeReferenceElements getPortTypeReferenceAccess() {
		return (pPortTypeReference != null) ? pPortTypeReference : (pPortTypeReference = new PortTypeReferenceElements());
	}
	
	public ParserRule getPortTypeReferenceRule() {
		return getPortTypeReferenceAccess().getRule();
	}

	//enum IOPortKind:
	//	INPUT=">|" | OUTPUT="|>" | INPUT_OUTPUT=">|>";
	public IOPortKindElements getIOPortKindAccess() {
		return (unknownRuleIOPortKind != null) ? unknownRuleIOPortKind : (unknownRuleIOPortKind = new IOPortKindElements());
	}
	
	public EnumRule getIOPortKindRule() {
		return getIOPortKindAccess().getRule();
	}

	//TypedIOPort:
	//	ioKind=IOPortKind type=PortTypeReference ("[" rate=INT "]")? multiport?="*"? name=ValidID displayName=STRING?;
	public TypedIOPortElements getTypedIOPortAccess() {
		return (pTypedIOPort != null) ? pTypedIOPort : (pTypedIOPort = new TypedIOPortElements());
	}
	
	public ParserRule getTypedIOPortRule() {
		return getTypedIOPortAccess().getRule();
	}

	//TypedInputPort:
	//	type=PortTypeReference ("[" rate=INT "]")? multiport?="*"? name=ValidID displayName=STRING? ("@"
	//	attributes+=AnnotationAttribute)*;
	public TypedInputPortElements getTypedInputPortAccess() {
		return (pTypedInputPort != null) ? pTypedInputPort : (pTypedInputPort = new TypedInputPortElements());
	}
	
	public ParserRule getTypedInputPortRule() {
		return getTypedInputPortAccess().getRule();
	}

	//TypedOutputPort:
	//	type=PortTypeReference ("[" rate=INT "]")? multiport?="*"? name=ValidID displayName=STRING? ("@"
	//	attributes+=AnnotationAttribute)*;
	public TypedOutputPortElements getTypedOutputPortAccess() {
		return (pTypedOutputPort != null) ? pTypedOutputPort : (pTypedOutputPort = new TypedOutputPortElements());
	}
	
	public ParserRule getTypedOutputPortRule() {
		return getTypedOutputPortAccess().getRule();
	}

	//RPID:
	//	ID? ("." ID);
	public RPIDElements getRPIDAccess() {
		return (pRPID != null) ? pRPID : (pRPID = new RPIDElements());
	}
	
	public ParserRule getRPIDRule() {
		return getRPIDAccess().getRule();
	}

	//Relation:
	//	"relation" sourcePort=[Port|RPID] "->" targetPorts+=[Port|RPID] ("," targetPorts+=[Port|RPID])* ("as" name=ValidID
	//	displayName=STRING?)?;
	public RelationElements getRelationAccess() {
		return (pRelation != null) ? pRelation : (pRelation = new RelationElements());
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//AtomicActorImpl:
	//	AbstractEntityActorImpl | CaltropActorImpl;
	public AtomicActorImplElements getAtomicActorImplAccess() {
		return (pAtomicActorImpl != null) ? pAtomicActorImpl : (pAtomicActorImpl = new AtomicActorImplElements());
	}
	
	public ParserRule getAtomicActorImplRule() {
		return getAtomicActorImplAccess().getRule();
	}

	//AbstractEntityActorImpl:
	//	"implementation" ({EntityActorImpl} entity=Entity | {EntityRefActorImpl} ref=[Entity|QualifiedName] ("<" ">")?);
	public AbstractEntityActorImplElements getAbstractEntityActorImplAccess() {
		return (pAbstractEntityActorImpl != null) ? pAbstractEntityActorImpl : (pAbstractEntityActorImpl = new AbstractEntityActorImplElements());
	}
	
	public ParserRule getAbstractEntityActorImplRule() {
		return getAbstractEntityActorImplAccess().getRule();
	}

	//// Caltrop stuff
	//CaltropActorImpl:
	//	{CaltropActorImpl} declarations+=StateVariable* (initActions+=InitAction+ actions+=FireAction* // must have at least one action, whether init or fire
	//	| actions+=FireAction+);
	public CaltropActorImplElements getCaltropActorImplAccess() {
		return (pCaltropActorImpl != null) ? pCaltropActorImpl : (pCaltropActorImpl = new CaltropActorImplElements());
	}
	
	public ParserRule getCaltropActorImplRule() {
		return getCaltropActorImplAccess().getRule();
	}

	//StateVariable:
	//	(constant?="val" | "var") type=JvmTypeReference name=ValidID ("=" valueExpression=XInitExpression ";")?;
	public StateVariableElements getStateVariableAccess() {
		return (pStateVariable != null) ? pStateVariable : (pStateVariable = new StateVariableElements());
	}
	
	public ParserRule getStateVariableRule() {
		return getStateVariableAccess().getRule();
	}

	//InitAction returns OutputAction:
	//	{OutputAction} (name=ValidID ":")? "initialize" MAPS_TO (outputPatterns+=OutputPattern (","
	//	outputPatterns+=OutputPattern)*)? ("guard" guardExpression=XExpression)? //	(attributes+=ActionVariable)*
	//	("do" bodyExpression=XExpression ";")?;
	public InitActionElements getInitActionAccess() {
		return (pInitAction != null) ? pInitAction : (pInitAction = new InitActionElements());
	}
	
	public ParserRule getInitActionRule() {
		return getInitActionAccess().getRule();
	}

	//FireAction:
	//	{FireAction} (name=ValidID ":")? "action" (inputPatterns+=InputPattern ("," inputPatterns+=InputPattern)*)? MAPS_TO
	//	(outputPatterns+=OutputPattern ("," outputPatterns+=OutputPattern)*)? ("guard" guardExpression=XExpression)? //	(attributes+=ActionVariable)*
	//	("do" bodyExpression=XExpression ";")?;
	public FireActionElements getFireActionAccess() {
		return (pFireAction != null) ? pFireAction : (pFireAction = new FireActionElements());
	}
	
	public ParserRule getFireActionRule() {
		return getFireActionAccess().getRule();
	}

	//LID:
	//	ValidID;
	public LIDElements getLIDAccess() {
		return (pLID != null) ? pLID : (pLID = new LIDElements());
	}
	
	public ParserRule getLIDRule() {
		return getLIDAccess().getRule();
	}

	//InputPattern:
	//	{InputPattern} (portRef=[Port|LID] ":")? "[" (variables+=ValidID ("," variables+=ValidID)*)? "]" ("repeat"
	//	repeatExpression=XExpression)? channels=ChannelSelector?;
	public InputPatternElements getInputPatternAccess() {
		return (pInputPattern != null) ? pInputPattern : (pInputPattern = new InputPatternElements());
	}
	
	public ParserRule getInputPatternRule() {
		return getInputPatternAccess().getRule();
	}

	//ChannelSelector:
	//	ExpressionChannelSelector | KeywordChannelSelector;
	public ChannelSelectorElements getChannelSelectorAccess() {
		return (pChannelSelector != null) ? pChannelSelector : (pChannelSelector = new ChannelSelectorElements());
	}
	
	public ParserRule getChannelSelectorRule() {
		return getChannelSelectorAccess().getRule();
	}

	//ExpressionChannelSelector:
	//	{ExpressionChannelSelector} ("at" | many?="at*") "{" keyExpressions+=XExpression ("," keyExpressions+=XExpression)*
	//	"}";
	public ExpressionChannelSelectorElements getExpressionChannelSelectorAccess() {
		return (pExpressionChannelSelector != null) ? pExpressionChannelSelector : (pExpressionChannelSelector = new ExpressionChannelSelectorElements());
	}
	
	public ParserRule getExpressionChannelSelectorRule() {
		return getExpressionChannelSelectorAccess().getRule();
	}

	//KeywordChannelSelector:
	//	"at"? keyword=ChannelSelectorKeyword;
	public KeywordChannelSelectorElements getKeywordChannelSelectorAccess() {
		return (pKeywordChannelSelector != null) ? pKeywordChannelSelector : (pKeywordChannelSelector = new KeywordChannelSelectorElements());
	}
	
	public ParserRule getKeywordChannelSelectorRule() {
		return getKeywordChannelSelectorAccess().getRule();
	}

	//enum ChannelSelectorKeyword:
	//	ALL="all" | ANY="any";
	public ChannelSelectorKeywordElements getChannelSelectorKeywordAccess() {
		return (unknownRuleChannelSelectorKeyword != null) ? unknownRuleChannelSelectorKeyword : (unknownRuleChannelSelectorKeyword = new ChannelSelectorKeywordElements());
	}
	
	public EnumRule getChannelSelectorKeywordRule() {
		return getChannelSelectorKeywordAccess().getRule();
	}

	//OutputPattern:
	//	{OutputPattern} (portRef=[Port|LID] ":")? "[" (valueExpressions+=XExpression ("," valueExpressions+=XExpression)*)?
	//	"]" ("repeat" repeatExpression=XExpression)? channels=ChannelSelector?;
	public OutputPatternElements getOutputPatternAccess() {
		return (pOutputPattern != null) ? pOutputPattern : (pOutputPattern = new OutputPatternElements());
	}
	
	public ParserRule getOutputPatternRule() {
		return getOutputPatternAccess().getRule();
	}

	//// XBase overrides
	////OldActionVariableValueRef: 
	////	'old' feature=[types::JvmField|ID]
	////;
	////StepActionVariableValueRef returns xbase::XExpression: 
	////	{xbase::XFeatureCall} feature=[types::JvmField|'step']
	////;
	//XPrimaryExpression returns xbase::XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | //	OldActionVariableValueRef | // StepActionVariableValueRef |
	//	XFeatureCall | XLiteral | XIfExpression | XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression
	//	| XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//// support # index operator, with highest priority
	//XUnaryOperation returns xbase::XExpression:
	//	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XOther2OperatorExpression |
	//	XOther2OperatorExpression;
	public XUnaryOperationElements getXUnaryOperationAccess() {
		return (pXUnaryOperation != null) ? pXUnaryOperation : (pXUnaryOperation = new XUnaryOperationElements());
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//XOther2OperatorExpression returns xbase::XExpression:
	//	XCastedExpression (=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther2])
	//	rightOperand=XCastedExpression)*;
	public XOther2OperatorExpressionElements getXOther2OperatorExpressionAccess() {
		return (pXOther2OperatorExpression != null) ? pXOther2OperatorExpression : (pXOther2OperatorExpression = new XOther2OperatorExpressionElements());
	}
	
	public ParserRule getXOther2OperatorExpressionRule() {
		return getXOther2OperatorExpressionAccess().getRule();
	}

	//OpOther2:
	//	"#";
	public OpOther2Elements getOpOther2Access() {
		return (pOpOther2 != null) ? pOpOther2 : (pOpOther2 = new OpOther2Elements());
	}
	
	public ParserRule getOpOther2Rule() {
		return getOpOther2Access().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
