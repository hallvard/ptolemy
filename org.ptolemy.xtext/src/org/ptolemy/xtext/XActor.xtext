// automatically generated by Xtext
grammar org.ptolemy.xtext.XActor with org.eclipse.xtext.xbase.Xbase

//import "http://www.ptolemy.org/kernel"
import "platform:/resource/org.ptolemy.ecore/src/org/ptolemy/ecore/kernel.ecore"
//import "http://www.ptolemy.org/actor"
import "platform:/resource/org.ptolemy.ecore/src/org/ptolemy/ecore/actor.ecore"
//import "http://www.ptolemy.org/caltrop"
import "platform:/resource/org.ptolemy.ecore/src/org/ptolemy/ecore/caltrop.ecore"
//import "http://www.ptolemy.org/xactor"
import "platform:/resource/org.ptolemy.ecore/src/org/ptolemy/ecore/xactor.ecore"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xtype" as xtype
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

ActorModel returns EntityFolder: {EntityFolder}
	'namespace' name=QualifiedName (displayName=STRING)? ':'
	(imports = XImportSection)?
	(attributes+=InjectableAttribute)*
	(
	(entityContainers+=EntityFolder) |
	(entities+=Entity)
	)*
	'end';

EntityFolder:
	'namespace' name=QualifiedName (displayName=STRING)? ':'
	(attributes+=InjectableAttribute)*
	(
	(entityContainers+=EntityFolder) |
	(entities+=Entity)
	)*
	'end';

QualifiedNameWithOptionalWildcard:
	ID ('.' ID)* ('.*')?
;

Entity:
	TypedAtomicActor | CompositeEntity;


ActorRef returns ActorRef:
	ref=[Entity|QualifiedName]
	('<' typeArguments+=JvmTypeReference (',' typeArguments+=JvmTypeReference)* '>')?
	('(' parameterBindings+=ParameterBinding (',' parameterBindings+=ParameterBinding)* ')')?
	;

ParameterBinding:
	(parameterRef=[Parameter|ValidID] '=')? valueExpression=XInitExpression
;

MAPS_TO:
	'==>';

TypedAtomicActor: {TypedAtomicActor}
	'actor' name=ValidID (displayName=STRING)?
	('<' typeParameters+=TypeParameter (',' typeParameters+=TypeParameter)* '>')?
	('(' attributes+=Parameter (',' attributes+=Parameter)* ')')?
	((ports+=TypedInputPort (',' ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort (',' ports+=TypedOutputPort)*)?)?
	('is' superEntity=ActorRef)?
	(attributes+=InjectableAttribute)*
	(impl=AtomicActorImpl)?
	'end';

TypeParameter:
	name=ValidID ('extends' type=JvmTypeReference)?
;

TypedAtomicActorInstance returns TypedAtomicActor: {TypedAtomicActor}
	name=ValidID (displayName=STRING)?
	(('=' superEntity=ActorRef ';'?) |
	(('=' 'actor')?
	((ports+=TypedInputPort (',' ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort (',' ports+=TypedOutputPort)*)?)?
	('is' superEntity=ActorRef)?
	(attributes+=InjectableAttribute)*
	(impl=AtomicActorImpl 'end')
	))
	;

CompositeEntity:
	{TypedCompositeActor}
	'network' name=ValidID (displayName=STRING)?
	('<' typeParameters+=TypeParameter (',' typeParameters+=TypeParameter)* '>')?
	('(' attributes+=Parameter (',' attributes+=Parameter)* ')')?
	((ports+=TypedInputPort (',' ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort (',' ports+=TypedOutputPort)*)?)? ':'
	(attributes+=InjectableAttribute)*
	('var' (attributes+=Variable ';')*)?
	('entities' (entities+=TypedAtomicActorInstance)*)
	('structure' (relations+=ConversionRelation)*)?
	'end';

InjectableAttribute:
	'-' type=JvmTypeReference name=ValidID (displayName=STRING)?
	('@' attributes+=AnnotationAttribute)*
	;

Variable:
	type=JvmTypeReference name=ValidID (displayName=STRING)?
	(OpSingleAssign valueExpression=XInitExpression)?;

XInitExpression returns xbase::XExpression:
	XOrExpression
	;

Parameter returns ActorParameter:
	type=JvmTypeReference
	name=ValidID (displayName=STRING)?
	('=' valueExpression=XInitExpression)?;

AnnotationAttribute returns Variable:
	(type=JvmParameterizedTypeReference)? name=ValidID '=' valueExpression=XInitExpression ';'
	;

TypedInputPort:
	type=JvmParameterizedTypeReference ('[' rate=INT ']')? (multiport?='*')?
	name=ValidID (displayName=STRING)?
	('@' attributes+=AnnotationAttribute)*
	;

TypedOutputPort:
	type=JvmParameterizedTypeReference ('[' rate=INT ']')? (multiport?='*')?
	name=ValidID (displayName=STRING)?
	('@' attributes+=AnnotationAttribute)*
	;

RPID:
	ID ('.' ID)?;

ConversionRelation:
	sourcePort=[Port|RPID]
	(('-->' targetPorts+=[Port|RPID] (',' targetPorts+=[Port|RPID])*) |
	('--' (valueVar=ValidID '|')? (conversionExpression=XExpression)? ('when' guardExpression=XExpression)? '-->' targetPorts+=[Port|RPID]) )
	('as' name=ValidID (displayName=STRING)?)? (';'?)
	;

AtomicActorImpl:
	JavaActorImpl | CaltropActorImpl;

JavaActorImpl:
	'implementation' type=JvmParameterizedTypeReference
	;

	// Caltrop stuff
CaltropActorImpl:
	{CaltropActorImpl} ':'
	(
	(declarations+=StateVariable) |
 	(initActions+=InitAction) |
 	(actions+=ReAction) |
	(functions+=(FunctionDeclaration | ProcedureDeclaration))
	)*
	(schedule=Schedule)?
	;

FunctionDeclaration:
	'function' name=ValidID '(' (parameters+=FunctionParameter (',' parameters+=FunctionParameter)*)? ')' '-->' type=JvmTypeReference ':'
	bodyExpression = XBodyExpression
	'end';

ProcedureDeclaration returns FunctionDeclaration:
	'procedure' name=ValidID '(' (parameters+=FunctionParameter (',' parameters+=FunctionParameter)*)? ')' ':'
	bodyExpression = XBodyExpression
	'end';

FunctionParameter returns JvmTypedObj:
	type=JvmTypeReference name=ValidID
;

StateVariable:
	('@' attributes+=AnnotationAttribute)*
	(constant?='val'|'var') (realm=Realm)? type=JvmTypeReference name=ValidID (((binding?=':='|'=') valueExpression=XInitExpression)? ('update' updateExpression=XExpression)? ';')?;

Realm:
	'@' key=(ID | STRING)
;

InitAction returns OutputAction: {OutputAction}
	(name=ValidID ':' )?
	'initialize'
	MAPS_TO (outputPatterns+=OutputPattern (',' outputPatterns+=OutputPattern)*)?
	('guard' guardExpression=XExpression)?
//	(attributes+=ActionVariable)*
	('do' bodyExpression=XBodyExpression)?
	'end';

OutputPattern: {OutputPattern}
	(portRef=[Port|ValidID] ':')?
	'[' (valueExpressions+=XExpression (',' valueExpressions+=XExpression)*)? ']'
	('repeat' repeatExpression=XExpression)?
	(channels=ChannelSelector)?
	('when' guardExpression=XExpression)?
	;

ReAction: FireAction | EventAction;

FireAction: {FireAction}
	(name=QualifiedName ':')?
	'action' (inputPatterns+=InputPattern (',' inputPatterns+=InputPattern)*)?
	MAPS_TO (outputPatterns+=OutputPattern (',' outputPatterns+=OutputPattern)*)?	
	('guard' guardExpression=XExpression)?
	('delay' delayExpression=XExpression)?
//	(attributes+=ActionVariable)*
	('do' bodyExpression=XBodyExpression)?
	('update' updateExpression=XBodyExpression)?
	'end';

XBodyExpression returns xbase::XExpression: 
	{xbase::XBlockExpression}
	(expressions+=XExpressionInsideBlock (';'?))*
;

InputPattern: {InputPattern}
	(portRef=[Port|ValidID] ':')?
	'[' (variables+=ValidID (',' variables+=ValidID)*)? ']'
	('repeat' repeatExpression=XExpression)?
	(channels=ChannelSelector)?
	('when' guardExpression=XExpression)?
	;

ChannelSelector:
	ExpressionChannelSelector | KeywordChannelSelector;

ExpressionChannelSelector: {ExpressionChannelSelector}
	('at' | (many?='at*')) '{' keyExpressions+=XExpression (',' keyExpressions+=XExpression)* '}';

KeywordChannelSelector:
	'at'? keyword=ChannelSelectorKeyword;

enum ChannelSelectorKeyword:
	ALL='all' |
	ANY='any';

Schedule:
	'schedule' 'fsm'? initial=[State] ':'
		(states+=State)+
	'end'	
;

State:
	name=ValidID (transitions+=Transition ('|' transitions+=Transition)*)? ';'
;

Transition:
	'(' tags+=QualifiedName (',' tags+=QualifiedName)* ')' '-->' target=[State|ValidID]
;

EventAction: {EventAction}
	(name=QualifiedName ':')?
	'event' (eventPatterns+=EventPattern (',' eventPatterns+=EventPattern)*)?
	MAPS_TO (outputPatterns+=OutputPattern (',' outputPatterns+=OutputPattern)*)?
	('guard' guardExpression=XExpression)?
//	(attributes+=ActionVariable)*
	('do' bodyExpression=XBodyExpression)?
	('update' updateExpression=XBodyExpression)?
	'end';

EventPattern: {EventPattern}
	varRef=[StateVariable|ValidID] (property ?= '.' | '!') name=(ValidID|STRING) ('#' qualifier=(ValidID|STRING))?
	'[' (variables+=ValidID (',' variables+=ValidID)*)? ']' ('@' timeExpression=XExpression)?
	('when' guardExpression=XExpression)?
	;

// XBase overrides

// support # index operator, with highest priority
XUnaryOperation returns xbase::XExpression:
	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XOther2OperatorExpression
	| XOther2OperatorExpression;

XOther2OperatorExpression returns xbase::XExpression:
	XCastedExpression (=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther2])
	rightOperand=XCastedExpression)*;

OpOther2:
	'#';

XClosure returns xbase::XExpression:
	(=>({xbase::XClosure} '[')  
		=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? 
		expression=XExpressionInClosure 
	']')
//	|
//	(=>({xbase::XClosure} 'lambda') '('=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?=')')
//		':'
//		expression=XBodyExpression
//		'end'
//	)
	;
