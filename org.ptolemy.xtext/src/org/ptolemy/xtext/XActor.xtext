// automatically generated by Xtext
grammar org.ptolemy.xtext.XActor with org.eclipse.xtext.xbase.Xbase

import "platform:/resource/org.ptolemy.ecore/model/kernel.ecore"
import "platform:/resource/org.ptolemy.ecore/model/actor.ecore"
import "platform:/resource/org.ptolemy.ecore/model/caltrop.ecore"
import "platform:/resource/org.ptolemy.ecore/model/xactor.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

ActorModel: {ActorModel}
	'model' name=QualifiedName (displayName=STRING)?
	(imports += ImportDirective)*
	(attributes+=Attribute)*
	(entityContainers+=EntityFolder)*
	(entities+=Entity)*
	(relations+=Relation)*
	;

EntityFolder: {EntityFolder}
	'container' name=ValidID (displayName=STRING)?
	(attributes+=Attribute)*
	'{' ((entities+=Entity) | (entityContainers+=EntityFolder))*	'}'
	;

ImportDirective:
	'import' importedNamespace=QualifiedNameWithWildcard
;

QualifiedNameWithWildcard:
	QualifiedName ('.*')?
;

Entity:
	TypedAtomicActor | TypedAtomicActorInstance |
	CompositeEntity;


ActorRef returns ActorRef:
	ref=[Entity|QualifiedName]
	('<' typeArguments+=JvmTypeReference (',' typeArguments+=JvmTypeReference)* '>')?
	('(' parameterBindings+=ParameterBinding (',' parameterBindings+=ParameterBinding)* ')')?
	;

XInitExpression returns xbase::XExpression:
	XOrExpression;

ParameterBinding:
	(parameterRef=[Parameter|ValidID] '=')? valueExpression=XInitExpression
;

IS_A:
	'is';

MAPS_TO:
	'==>';

TypedAtomicActor: {TypedAtomicActor}
	'actor' name=ValidID (displayName=STRING)?
	('<' typeParameters+=TypeParameter (',' typeParameters+=TypeParameter)* '>')?
	('(' attributes+=ActorParameter (',' attributes+=ActorParameter)* ')')?
	((ports+=TypedInputPort (',' ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort (',' ports+=TypedOutputPort)*)?)?
	(IS_A superEntity=ActorRef)?
	(ports+=Port)*
	(attributes+=Attribute)*
	(impl=AtomicActorImpl)?;

TypeParameter:
	name=ID ('extends' type=JvmTypeReference)?
;

InstanceParameterBinding returns ParameterBinding:
	(parameterRef=[Parameter|ValidID] '=')? valueExpression=(XBooleanLiteral | XNumberLiteral | XStringLiteral)
;
InstanceActorRef returns ActorRef:
	ref=[Entity|QualifiedName]
	('(' parameterBindings+=InstanceParameterBinding (',' parameterBindings+=InstanceParameterBinding)* ')')?
	;
TypedAtomicActorInstance returns TypedAtomicActor: {TypedAtomicActor}
	'instance' name=ValidID (displayName=STRING)? IS_A superEntity=InstanceActorRef
	;

CompositeEntity:
	(('entity' name=ValidID (displayName=STRING)? (IS_A superEntity=ActorRef)?) |
	({TypedCompositeActor} 'composite' name=ValidID (displayName=STRING)?
	('<' typeParameters+=TypeParameter (',' typeParameters+=TypeParameter)* '>')?
	('(' attributes+=ActorParameter (',' attributes+=ActorParameter)* ')')?
	((ports+=TypedInputPort (',' ports+=TypedInputPort)*)? MAPS_TO (ports+=TypedOutputPort (',' ports+=TypedOutputPort)*)?)?)
	(IS_A superEntity=ActorRef)?
	)
	(ports+=Port)*
	(attributes+=Attribute)*
	'{'
	(entities+=Entity)*
	(relations+=Relation)*
	'}';

Attribute:
	InjectableAttribute | Variable;

InjectableAttribute:
	'-' type=JvmTypeReference name=ValidID (displayName=STRING)?;

Variable:
	('+' | ({Parameter} '*'))
	type=JvmTypeReference name=ValidID (displayName=STRING)?
	('=' valueExpression=XInitExpression ';')?;

ActorParameter:
	type=JvmTypeReference
	name=ValidID (displayName=STRING)?
	('=' valueExpression=XInitExpression)?;

Port:
	(PlainPort | TypedIOPort)
	('@' attributes+=AnnotationAttribute)*
	;

AnnotationAttribute returns Attribute: {Parameter}
	(type=PortTypeReference)? name=ValidID '=' valueExpression=XInitExpression ';'
;

PlainPort returns Port: {Port}
	'->' name=ValidID (displayName=STRING)?;

PortTypeReference returns types::JvmTypeReference:
	JvmParameterizedTypeReference;

enum IOPortKind:
	INPUT='>|' |
	OUTPUT='|>' |
	INPUT_OUTPUT='>|>';

TypedIOPort:
	ioKind=IOPortKind
	type=PortTypeReference ('[' rate=INT ']')? (multiport?='*')?
	name=ValidID (displayName=STRING)?
	;

TypedInputPort:
	type=PortTypeReference ('[' rate=INT ']')? (multiport?='*')?
	name=ValidID (displayName=STRING)?
	('@' attributes+=AnnotationAttribute)*
	;

TypedOutputPort:
	type=PortTypeReference ('[' rate=INT ']')? (multiport?='*')?
	name=ValidID (displayName=STRING)?
	('@' attributes+=AnnotationAttribute)*
	;

RPID:
	ID? ('.' ID);

Relation:
	'relation' sourcePort=[Port|RPID] '->' targetPorts+=[Port|RPID] (',' targetPorts+=[Port|RPID])*
	('as' name=ValidID (displayName=STRING)?)?;

AtomicActorImpl:
	AbstractEntityActorImpl | CaltropActorImpl;

AbstractEntityActorImpl:
	'implementation' (({EntityActorImpl} entity=Entity) | ({EntityRefActorImpl} ref=[Entity|QualifiedName] ('<' '>')?));

	// Caltrop stuff
CaltropActorImpl:
	{CaltropActorImpl}
	(declarations+=StateVariable)*
	(
	 // must have at least one action, whether init or fire
	 ((initActions+=InitAction)+ (actions+=FireAction)*) |
	 ((actions+=FireAction)+)
	 )
	;

StateVariable:
	(constant?='val'|'var') type=JvmTypeReference name=ValidID ('=' valueExpression=XInitExpression ';')?;

InitAction returns OutputAction: {OutputAction}
	(name=ValidID ':' )?
	'initialize'
	MAPS_TO (outputPatterns+=OutputPattern (',' outputPatterns+=OutputPattern)*)?
	('guard' guardExpression=XExpression)?
//	(attributes+=ActionVariable)*
	('do' bodyExpression=XExpression ';')?;

FireAction: {FireAction}
	(name=ValidID ':' )?
	'action' (inputPatterns+=InputPattern (',' inputPatterns+=InputPattern)*)?
	MAPS_TO (outputPatterns+=OutputPattern (',' outputPatterns+=OutputPattern)*)?
	('guard' guardExpression=XExpression)?
//	(attributes+=ActionVariable)*
	('do' bodyExpression=XExpression ';')?;

LID:
	ValidID;

InputPattern: {InputPattern}
	(portRef=[Port|LID] ':')?
	'[' (variables+=ValidID (',' variables+=ValidID)*)? ']'
	('repeat' repeatExpression=XExpression)?
	(channels=ChannelSelector)?;

ChannelSelector:
	ExpressionChannelSelector | KeywordChannelSelector;

ExpressionChannelSelector: {ExpressionChannelSelector}
	('at' | (many?='at*')) '{' keyExpressions+=XExpression (',' keyExpressions+=XExpression)* '}';

KeywordChannelSelector:
	'at'? keyword=ChannelSelectorKeyword;

enum ChannelSelectorKeyword:
	ALL='all' |
	ANY='any';

OutputPattern: {OutputPattern}
	(portRef=[Port|LID] ':')?
	'[' (valueExpressions+=XExpression (',' valueExpressions+=XExpression)*)? ']'
	('repeat' repeatExpression=XExpression)?
	(channels=ChannelSelector)?;

// XBase overrides

//OldActionVariableValueRef: 
//	'old' feature=[types::JvmField|ID]
//;

//StepActionVariableValueRef returns xbase::XExpression: 
//	{xbase::XFeatureCall} feature=[types::JvmField|'step']
//;

XPrimaryExpression returns xbase::XExpression:
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
//	OldActionVariableValueRef | // StepActionVariableValueRef |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression;

// support # index operator, with highest priority
XUnaryOperation returns xbase::XExpression:
	{xbase::XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XOther2OperatorExpression
	| XOther2OperatorExpression;

XOther2OperatorExpression returns xbase::XExpression:
	XCastedExpression (=> ({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther2])
	rightOperand=XCastedExpression)*;

OpOther2:
	'#';
