/*
 * generated by Xtext
 */
package org.ptolemy.xtext.formatting;

import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;
import org.ptolemy.xtext.services.XActorGrammarAccess;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class XActorFormatter extends AbstractDeclarativeFormatter {
	
	@Override
	protected void configureFormatting(FormattingConfig c) {
		XActorGrammarAccess f = (XActorGrammarAccess) getGrammarAccess();
		for(Pair<Keyword, Keyword> pair: f.findKeywordPairs("{", "}")) {
			c.setIndentation(pair.getFirst(), pair.getSecond());
			c.setLinewrap(1).after(pair.getFirst());
			c.setLinewrap(1).before(pair.getSecond());
			c.setLinewrap(1).after(pair.getSecond());
		}
		for(Keyword comma: f.findKeywords(",")) {
			c.setNoLinewrap().before(comma);
			c.setNoSpace().before(comma);
			c.setLinewrap().after(comma);
		}
		c.setLinewrap(0, 1, 2).before(f.getSL_COMMENTRule());
		c.setLinewrap(0, 1, 2).before(f.getML_COMMENTRule());
		c.setLinewrap(0, 1, 1).after(f.getML_COMMENTRule());

		configureCustomFormatting(c, f);
	}

	protected void configureCustomFormatting(FormattingConfig c, XActorGrammarAccess f) {
		c.setLinewrap(1).after(f.getImportDirectiveRule());
		c.setLinewrap(1).before(f.getEntityFolderRule());
		
		c.setLinewrap(2).around(f.getEntityRule());
		c.setLinewrap(1).before(f.getRelationRule());

		c.setSpace(" ").after(f.getTypedAtomicActorAccess().getDisplayNameSTRINGTerminalRuleCall_3_0());
		c.setNoSpace().before(f.getTypedAtomicActorAccess().getLessThanSignKeyword_4_0());
		c.setLinewrap(1).before(f.getTypedAtomicActorAccess().getLeftParenthesisKeyword_5_0());
		c.setLinewrap(1).before(f.getTypedAtomicActorAccess().getPortsAssignment_6_0_0());
		c.setLinewrap(1).before(f.getTypedAtomicActorAccess().getPortsAssignment_8());
		c.setLinewrap(1).before(f.getTypedAtomicActorAccess().getAttributesAssignment_9());

		c.setSpace(" ").after(f.getTypedAtomicActorAccess().getDisplayNameSTRINGTerminalRuleCall_3_0());
		c.setNoSpace().before(f.getTypedAtomicActorAccess().getLessThanSignKeyword_4_0());
		c.setLinewrap(1).before(f.getCompositeEntityAccess().getLeftParenthesisKeyword_0_1_0_5_0());
		c.setLinewrap(1).before(f.getCompositeEntityAccess().getPortsAssignment_0_1_0_6_0_0());
		c.setLinewrap(1).before(f.getCompositeEntityAccess().getPortsAssignment_1());
		c.setLinewrap(1).before(f.getCompositeEntityAccess().getAttributesAssignment_2());
		
		c.setLinewrap(1).before(f.getAtomicActorImplRule());
		
		c.setLinewrap(1).before(f.getFireActionAccess().getActionKeyword_2());
		c.setLinewrap(1).before(f.getFireActionAccess().getGuardKeyword_6_0());
//		c.setLinewrap(1).before(f.getFireActionAccess().getAttributesAssignment_7());
		c.setLinewrap(1).before(f.getFireActionAccess().getDoKeyword_7_0());
	}
}
